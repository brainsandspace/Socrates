/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 34);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst zlib = __webpack_require__(33);\n\nconst AVAILABLE_WINDOW_BITS = [8, 9, 10, 11, 12, 13, 14, 15];\nconst DEFAULT_WINDOW_BITS = 15;\nconst DEFAULT_MEM_LEVEL = 8;\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst EMPTY_BLOCK = Buffer.from([0x00]);\n\n/**\n * Per-message Compression Extensions implementation\n */\nclass PerMessageDeflate {\n  constructor (options, isServer, maxPayload) {\n    this._options = options || {};\n    this._isServer = !!isServer;\n    this._inflate = null;\n    this._deflate = null;\n    this.params = null;\n    this._maxPayload = maxPayload || 0;\n    this.threshold = this._options.threshold === undefined ? 1024 : this._options.threshold;\n  }\n\n  /**\n   * Create extension parameters offer\n   *\n   * @api public\n   */\n\n  offer () {\n    var params = {};\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n    return params;\n  }\n\n  /**\n   * Accept extension offer\n   *\n   * @api public\n   */\n  accept (paramsList) {\n    paramsList = this.normalizeParams(paramsList);\n\n    var params;\n    if (this._isServer) {\n      params = this.acceptAsServer(paramsList);\n    } else {\n      params = this.acceptAsClient(paramsList);\n    }\n\n    this.params = params;\n    return params;\n  }\n\n  /**\n   * Releases all resources used by the extension\n   *\n   * @api public\n   */\n  cleanup () {\n    if (this._inflate) {\n      if (this._inflate.writeInProgress) {\n        this._inflate.pendingClose = true;\n      } else {\n        this._inflate.close();\n        this._inflate = null;\n      }\n    }\n    if (this._deflate) {\n      if (this._deflate.writeInProgress) {\n        this._deflate.pendingClose = true;\n      } else {\n        this._deflate.close();\n        this._deflate = null;\n      }\n    }\n  }\n\n  /**\n   * Accept extension offer from client\n   *\n   * @api private\n   */\n\n  acceptAsServer (paramsList) {\n    var accepted = {};\n    var result = paramsList.some((params) => {\n      accepted = {};\n      if (this._options.serverNoContextTakeover === false && params.server_no_context_takeover) {\n        return;\n      }\n      if (this._options.serverMaxWindowBits === false && params.server_max_window_bits) {\n        return;\n      }\n      if (typeof this._options.serverMaxWindowBits === 'number' &&\n          typeof params.server_max_window_bits === 'number' &&\n          this._options.serverMaxWindowBits > params.server_max_window_bits) {\n        return;\n      }\n      if (typeof this._options.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {\n        return;\n      }\n\n      if (this._options.serverNoContextTakeover || params.server_no_context_takeover) {\n        accepted.server_no_context_takeover = true;\n      }\n      if (this._options.clientNoContextTakeover) {\n        accepted.client_no_context_takeover = true;\n      }\n      if (this._options.clientNoContextTakeover !== false && params.client_no_context_takeover) {\n        accepted.client_no_context_takeover = true;\n      }\n      if (typeof this._options.serverMaxWindowBits === 'number') {\n        accepted.server_max_window_bits = this._options.serverMaxWindowBits;\n      } else if (typeof params.server_max_window_bits === 'number') {\n        accepted.server_max_window_bits = params.server_max_window_bits;\n      }\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        accepted.client_max_window_bits = this._options.clientMaxWindowBits;\n      } else if (this._options.clientMaxWindowBits !== false && typeof params.client_max_window_bits === 'number') {\n        accepted.client_max_window_bits = params.client_max_window_bits;\n      }\n      return true;\n    });\n\n    if (!result) {\n      throw new Error(`Doesn't support the offered configuration`);\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept extension response from server\n   *\n   * @api privaye\n   */\n\n  acceptAsClient (paramsList) {\n    var params = paramsList[0];\n    if (this._options.clientNoContextTakeover != null) {\n      if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n        throw new Error('Invalid value for \"client_no_context_takeover\"');\n      }\n    }\n    if (this._options.clientMaxWindowBits != null) {\n      if (this._options.clientMaxWindowBits === false && params.client_max_window_bits) {\n        throw new Error('Invalid value for \"client_max_window_bits\"');\n      }\n      if (typeof this._options.clientMaxWindowBits === 'number' &&\n          (!params.client_max_window_bits || params.client_max_window_bits > this._options.clientMaxWindowBits)) {\n        throw new Error('Invalid value for \"client_max_window_bits\"');\n      }\n    }\n    return params;\n  }\n\n  /**\n   * Normalize extensions parameters\n   *\n   * @api private\n   */\n\n  normalizeParams (paramsList) {\n    return paramsList.map((params) => {\n      Object.keys(params).forEach((key) => {\n        var value = params[key];\n        if (value.length > 1) {\n          throw new Error('Multiple extension parameters for ' + key);\n        }\n\n        value = value[0];\n\n        switch (key) {\n          case 'server_no_context_takeover':\n          case 'client_no_context_takeover':\n            if (value !== true) {\n              throw new Error(`invalid extension parameter value for ${key} (${value})`);\n            }\n            params[key] = true;\n            break;\n          case 'server_max_window_bits':\n          case 'client_max_window_bits':\n            if (typeof value === 'string') {\n              value = parseInt(value, 10);\n              if (!~AVAILABLE_WINDOW_BITS.indexOf(value)) {\n                throw new Error(`invalid extension parameter value for ${key} (${value})`);\n              }\n            }\n            if (!this._isServer && value === true) {\n              throw new Error(`Missing extension parameter value for ${key}`);\n            }\n            params[key] = value;\n            break;\n          default:\n            throw new Error(`Not defined extension parameter (${key})`);\n        }\n      });\n      return params;\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress (data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const maxWindowBits = this.params[`${endpoint}_max_window_bits`];\n      this._inflate = zlib.createInflateRaw({\n        windowBits: typeof maxWindowBits === 'number' ? maxWindowBits : DEFAULT_WINDOW_BITS\n      });\n    }\n    this._inflate.writeInProgress = true;\n\n    var totalLength = 0;\n    const buffers = [];\n    var err;\n\n    const onData = (data) => {\n      totalLength += data.length;\n      if (this._maxPayload < 1 || totalLength <= this._maxPayload) {\n        return buffers.push(data);\n      }\n\n      err = new Error('max payload size exceeded');\n      err.closeCode = 1009;\n      this._inflate.reset();\n    };\n\n    const onError = (err) => {\n      cleanup();\n      callback(err);\n    };\n\n    const cleanup = () => {\n      if (!this._inflate) return;\n\n      this._inflate.removeListener('error', onError);\n      this._inflate.removeListener('data', onData);\n      this._inflate.writeInProgress = false;\n\n      if (\n        fin && this.params[`${endpoint}_no_context_takeover`] ||\n        this._inflate.pendingClose\n      ) {\n        this._inflate.close();\n        this._inflate = null;\n      }\n    };\n\n    this._inflate.on('error', onError).on('data', onData);\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      cleanup();\n      if (err) callback(err);\n      else callback(null, Buffer.concat(buffers, totalLength));\n    });\n  }\n\n  /**\n   * Compress message\n   *\n   * @api public\n   */\n\n  compress (data, fin, callback) {\n    if (!data || data.length === 0) {\n      process.nextTick(callback, null, EMPTY_BLOCK);\n      return;\n    }\n\n    var endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      var maxWindowBits = this.params[endpoint + '_max_window_bits'];\n      this._deflate = zlib.createDeflateRaw({\n        flush: zlib.Z_SYNC_FLUSH,\n        windowBits: typeof maxWindowBits === 'number' ? maxWindowBits : DEFAULT_WINDOW_BITS,\n        memLevel: this._options.memLevel || DEFAULT_MEM_LEVEL\n      });\n    }\n    this._deflate.writeInProgress = true;\n\n    const buffers = [];\n\n    const onData = (data) => buffers.push(data);\n    const onError = (err) => {\n      cleanup();\n      callback(err);\n    };\n    const cleanup = () => {\n      if (!this._deflate) return;\n      this._deflate.removeListener('error', onError);\n      this._deflate.removeListener('data', onData);\n      this._deflate.writeInProgress = false;\n      if ((fin && this.params[endpoint + '_no_context_takeover']) || this._deflate.pendingClose) {\n        this._deflate.close();\n        this._deflate = null;\n      }\n    };\n\n    this._deflate.on('error', onError).on('data', onData);\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      cleanup();\n      var data = Buffer.concat(buffers);\n      if (fin) {\n        data = data.slice(0, data.length - 4);\n      }\n      callback(null, data);\n    });\n  }\n}\n\nPerMessageDeflate.extensionName = 'permessage-deflate';\n\nmodule.exports = PerMessageDeflate;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = require(\"crypto\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImNyeXB0b1wiP2VmNDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiY3J5cHRvXCJcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("module.exports = require(\"http\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImh0dHBcIj84ZTQ0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImh0dHBcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJodHRwXCJcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("module.exports = require(\"url\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInVybFwiP2NhZWMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXJsXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwidXJsXCJcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 4;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vYmluZGluZ3M/NWViOCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH07XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IDQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmluZGluZ3Ncbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__filename) {\n/**\n * Module dependencies.\n */\n\nvar fs = __webpack_require__(28)\n  , path = __webpack_require__(32)\n  , join = path.join\n  , dirname = path.dirname\n  , exists = fs.existsSync || path.existsSync\n  , defaults = {\n        arrow: process.env.NODE_BINDINGS_ARROW || ' → '\n      , compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled'\n      , platform: process.platform\n      , arch: process.arch\n      , version: process.versions.node\n      , bindings: 'bindings.node'\n      , try: [\n          // node-gyp's linked version in the \"build\" dir\n          [ 'module_root', 'build', 'bindings' ]\n          // node-waf and gyp_addon (a.k.a node-gyp)\n        , [ 'module_root', 'build', 'Debug', 'bindings' ]\n        , [ 'module_root', 'build', 'Release', 'bindings' ]\n          // Debug files, for development (legacy behavior, remove for node v0.9)\n        , [ 'module_root', 'out', 'Debug', 'bindings' ]\n        , [ 'module_root', 'Debug', 'bindings' ]\n          // Release files, but manually compiled (legacy behavior, remove for node v0.9)\n        , [ 'module_root', 'out', 'Release', 'bindings' ]\n        , [ 'module_root', 'Release', 'bindings' ]\n          // Legacy from node-waf, node <= 0.4.x\n        , [ 'module_root', 'build', 'default', 'bindings' ]\n          // Production \"Release\" buildtype binary (meh...)\n        , [ 'module_root', 'compiled', 'version', 'platform', 'arch', 'bindings' ]\n        ]\n    }\n\n/**\n * The main `bindings()` function loads the compiled bindings for a given module.\n * It uses V8's Error API to determine the parent filename that this function is\n * being invoked from, which is then used to find the root directory.\n */\n\nfunction bindings (opts) {\n\n  // Argument surgery\n  if (typeof opts == 'string') {\n    opts = { bindings: opts }\n  } else if (!opts) {\n    opts = {}\n  }\n  opts.__proto__ = defaults\n\n  // Get the module root\n  if (!opts.module_root) {\n    opts.module_root = exports.getRoot(exports.getFileName())\n  }\n\n  // Ensure the given bindings name ends with .node\n  if (path.extname(opts.bindings) != '.node') {\n    opts.bindings += '.node'\n  }\n\n  var tries = []\n    , i = 0\n    , l = opts.try.length\n    , n\n    , b\n    , err\n\n  for (; i<l; i++) {\n    n = join.apply(null, opts.try[i].map(function (p) {\n      return opts[p] || p\n    }))\n    tries.push(n)\n    try {\n      b = opts.path ? /*require.resolve*/(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND';; throw e; }())) : !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND';; throw e; }())\n      if (!opts.path) {\n        b.path = n\n      }\n      return b\n    } catch (e) {\n      if (!/not find/i.test(e.message)) {\n        throw e\n      }\n    }\n  }\n\n  err = new Error('Could not locate the bindings file. Tried:\\n'\n    + tries.map(function (a) { return opts.arrow + a }).join('\\n'))\n  err.tries = tries\n  throw err\n}\nmodule.exports = exports = bindings\n\n\n/**\n * Gets the filename of the JavaScript file that invokes this function.\n * Used to help find the root directory of a module.\n * Optionally accepts an filename argument to skip when searching for the invoking filename\n */\n\nexports.getFileName = function getFileName (calling_file) {\n  var origPST = Error.prepareStackTrace\n    , origSTL = Error.stackTraceLimit\n    , dummy = {}\n    , fileName\n\n  Error.stackTraceLimit = 10\n\n  Error.prepareStackTrace = function (e, st) {\n    for (var i=0, l=st.length; i<l; i++) {\n      fileName = st[i].getFileName()\n      if (fileName !== __filename) {\n        if (calling_file) {\n            if (fileName !== calling_file) {\n              return\n            }\n        } else {\n          return\n        }\n      }\n    }\n  }\n\n  // run the 'prepareStackTrace' function above\n  Error.captureStackTrace(dummy)\n  dummy.stack\n\n  // cleanup\n  Error.prepareStackTrace = origPST\n  Error.stackTraceLimit = origSTL\n\n  return fileName\n}\n\n/**\n * Gets the root directory of a module, given an arbitrary filename\n * somewhere in the module tree. The \"root directory\" is the directory\n * containing the `package.json` file.\n *\n *   In:  /home/nate/node-native-module/lib/index.js\n *   Out: /home/nate/node-native-module\n */\n\nexports.getRoot = function getRoot (file) {\n  var dir = dirname(file)\n    , prev\n  while (true) {\n    if (dir === '.') {\n      // Avoids an infinite loop in rare cases, like the REPL\n      dir = process.cwd()\n    }\n    if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {\n      // Found the 'package.json' file or 'node_modules' dir; we're done\n      return dir\n    }\n    if (prev === dir) {\n      // Got to the top\n      throw new Error('Could not find module root given file: \"' + file\n                    + '\". Do you have a `package.json` file? ')\n    }\n    // Try the parent dir next\n    prev = dir\n    dir = join(dir, '..')\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, \"/index.js\"))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vYmluZGluZ3MvYmluZGluZ3MuanM/NTlkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpXG4gICwgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuICAsIGpvaW4gPSBwYXRoLmpvaW5cbiAgLCBkaXJuYW1lID0gcGF0aC5kaXJuYW1lXG4gICwgZXhpc3RzID0gZnMuZXhpc3RzU3luYyB8fCBwYXRoLmV4aXN0c1N5bmNcbiAgLCBkZWZhdWx0cyA9IHtcbiAgICAgICAgYXJyb3c6IHByb2Nlc3MuZW52Lk5PREVfQklORElOR1NfQVJST1cgfHwgJyDihpIgJ1xuICAgICAgLCBjb21waWxlZDogcHJvY2Vzcy5lbnYuTk9ERV9CSU5ESU5HU19DT01QSUxFRF9ESVIgfHwgJ2NvbXBpbGVkJ1xuICAgICAgLCBwbGF0Zm9ybTogcHJvY2Vzcy5wbGF0Zm9ybVxuICAgICAgLCBhcmNoOiBwcm9jZXNzLmFyY2hcbiAgICAgICwgdmVyc2lvbjogcHJvY2Vzcy52ZXJzaW9ucy5ub2RlXG4gICAgICAsIGJpbmRpbmdzOiAnYmluZGluZ3Mubm9kZSdcbiAgICAgICwgdHJ5OiBbXG4gICAgICAgICAgLy8gbm9kZS1neXAncyBsaW5rZWQgdmVyc2lvbiBpbiB0aGUgXCJidWlsZFwiIGRpclxuICAgICAgICAgIFsgJ21vZHVsZV9yb290JywgJ2J1aWxkJywgJ2JpbmRpbmdzJyBdXG4gICAgICAgICAgLy8gbm9kZS13YWYgYW5kIGd5cF9hZGRvbiAoYS5rLmEgbm9kZS1neXApXG4gICAgICAgICwgWyAnbW9kdWxlX3Jvb3QnLCAnYnVpbGQnLCAnRGVidWcnLCAnYmluZGluZ3MnIF1cbiAgICAgICAgLCBbICdtb2R1bGVfcm9vdCcsICdidWlsZCcsICdSZWxlYXNlJywgJ2JpbmRpbmdzJyBdXG4gICAgICAgICAgLy8gRGVidWcgZmlsZXMsIGZvciBkZXZlbG9wbWVudCAobGVnYWN5IGJlaGF2aW9yLCByZW1vdmUgZm9yIG5vZGUgdjAuOSlcbiAgICAgICAgLCBbICdtb2R1bGVfcm9vdCcsICdvdXQnLCAnRGVidWcnLCAnYmluZGluZ3MnIF1cbiAgICAgICAgLCBbICdtb2R1bGVfcm9vdCcsICdEZWJ1ZycsICdiaW5kaW5ncycgXVxuICAgICAgICAgIC8vIFJlbGVhc2UgZmlsZXMsIGJ1dCBtYW51YWxseSBjb21waWxlZCAobGVnYWN5IGJlaGF2aW9yLCByZW1vdmUgZm9yIG5vZGUgdjAuOSlcbiAgICAgICAgLCBbICdtb2R1bGVfcm9vdCcsICdvdXQnLCAnUmVsZWFzZScsICdiaW5kaW5ncycgXVxuICAgICAgICAsIFsgJ21vZHVsZV9yb290JywgJ1JlbGVhc2UnLCAnYmluZGluZ3MnIF1cbiAgICAgICAgICAvLyBMZWdhY3kgZnJvbSBub2RlLXdhZiwgbm9kZSA8PSAwLjQueFxuICAgICAgICAsIFsgJ21vZHVsZV9yb290JywgJ2J1aWxkJywgJ2RlZmF1bHQnLCAnYmluZGluZ3MnIF1cbiAgICAgICAgICAvLyBQcm9kdWN0aW9uIFwiUmVsZWFzZVwiIGJ1aWxkdHlwZSBiaW5hcnkgKG1laC4uLilcbiAgICAgICAgLCBbICdtb2R1bGVfcm9vdCcsICdjb21waWxlZCcsICd2ZXJzaW9uJywgJ3BsYXRmb3JtJywgJ2FyY2gnLCAnYmluZGluZ3MnIF1cbiAgICAgICAgXVxuICAgIH1cblxuLyoqXG4gKiBUaGUgbWFpbiBgYmluZGluZ3MoKWAgZnVuY3Rpb24gbG9hZHMgdGhlIGNvbXBpbGVkIGJpbmRpbmdzIGZvciBhIGdpdmVuIG1vZHVsZS5cbiAqIEl0IHVzZXMgVjgncyBFcnJvciBBUEkgdG8gZGV0ZXJtaW5lIHRoZSBwYXJlbnQgZmlsZW5hbWUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzXG4gKiBiZWluZyBpbnZva2VkIGZyb20sIHdoaWNoIGlzIHRoZW4gdXNlZCB0byBmaW5kIHRoZSByb290IGRpcmVjdG9yeS5cbiAqL1xuXG5mdW5jdGlvbiBiaW5kaW5ncyAob3B0cykge1xuXG4gIC8vIEFyZ3VtZW50IHN1cmdlcnlcbiAgaWYgKHR5cGVvZiBvcHRzID09ICdzdHJpbmcnKSB7XG4gICAgb3B0cyA9IHsgYmluZGluZ3M6IG9wdHMgfVxuICB9IGVsc2UgaWYgKCFvcHRzKSB7XG4gICAgb3B0cyA9IHt9XG4gIH1cbiAgb3B0cy5fX3Byb3RvX18gPSBkZWZhdWx0c1xuXG4gIC8vIEdldCB0aGUgbW9kdWxlIHJvb3RcbiAgaWYgKCFvcHRzLm1vZHVsZV9yb290KSB7XG4gICAgb3B0cy5tb2R1bGVfcm9vdCA9IGV4cG9ydHMuZ2V0Um9vdChleHBvcnRzLmdldEZpbGVOYW1lKCkpXG4gIH1cblxuICAvLyBFbnN1cmUgdGhlIGdpdmVuIGJpbmRpbmdzIG5hbWUgZW5kcyB3aXRoIC5ub2RlXG4gIGlmIChwYXRoLmV4dG5hbWUob3B0cy5iaW5kaW5ncykgIT0gJy5ub2RlJykge1xuICAgIG9wdHMuYmluZGluZ3MgKz0gJy5ub2RlJ1xuICB9XG5cbiAgdmFyIHRyaWVzID0gW11cbiAgICAsIGkgPSAwXG4gICAgLCBsID0gb3B0cy50cnkubGVuZ3RoXG4gICAgLCBuXG4gICAgLCBiXG4gICAgLCBlcnJcblxuICBmb3IgKDsgaTxsOyBpKyspIHtcbiAgICBuID0gam9pbi5hcHBseShudWxsLCBvcHRzLnRyeVtpXS5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBvcHRzW3BdIHx8IHBcbiAgICB9KSlcbiAgICB0cmllcy5wdXNoKG4pXG4gICAgdHJ5IHtcbiAgICAgIGIgPSBvcHRzLnBhdGggPyByZXF1aXJlLnJlc29sdmUobikgOiByZXF1aXJlKG4pXG4gICAgICBpZiAoIW9wdHMucGF0aCkge1xuICAgICAgICBiLnBhdGggPSBuXG4gICAgICB9XG4gICAgICByZXR1cm4gYlxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICghL25vdCBmaW5kL2kudGVzdChlLm1lc3NhZ2UpKSB7XG4gICAgICAgIHRocm93IGVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlcnIgPSBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBsb2NhdGUgdGhlIGJpbmRpbmdzIGZpbGUuIFRyaWVkOlxcbidcbiAgICArIHRyaWVzLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gb3B0cy5hcnJvdyArIGEgfSkuam9pbignXFxuJykpXG4gIGVyci50cmllcyA9IHRyaWVzXG4gIHRocm93IGVyclxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gYmluZGluZ3NcblxuXG4vKipcbiAqIEdldHMgdGhlIGZpbGVuYW1lIG9mIHRoZSBKYXZhU2NyaXB0IGZpbGUgdGhhdCBpbnZva2VzIHRoaXMgZnVuY3Rpb24uXG4gKiBVc2VkIHRvIGhlbHAgZmluZCB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgYSBtb2R1bGUuXG4gKiBPcHRpb25hbGx5IGFjY2VwdHMgYW4gZmlsZW5hbWUgYXJndW1lbnQgdG8gc2tpcCB3aGVuIHNlYXJjaGluZyBmb3IgdGhlIGludm9raW5nIGZpbGVuYW1lXG4gKi9cblxuZXhwb3J0cy5nZXRGaWxlTmFtZSA9IGZ1bmN0aW9uIGdldEZpbGVOYW1lIChjYWxsaW5nX2ZpbGUpIHtcbiAgdmFyIG9yaWdQU1QgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZVxuICAgICwgb3JpZ1NUTCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdFxuICAgICwgZHVtbXkgPSB7fVxuICAgICwgZmlsZU5hbWVcblxuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAxMFxuXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gZnVuY3Rpb24gKGUsIHN0KSB7XG4gICAgZm9yICh2YXIgaT0wLCBsPXN0Lmxlbmd0aDsgaTxsOyBpKyspIHtcbiAgICAgIGZpbGVOYW1lID0gc3RbaV0uZ2V0RmlsZU5hbWUoKVxuICAgICAgaWYgKGZpbGVOYW1lICE9PSBfX2ZpbGVuYW1lKSB7XG4gICAgICAgIGlmIChjYWxsaW5nX2ZpbGUpIHtcbiAgICAgICAgICAgIGlmIChmaWxlTmFtZSAhPT0gY2FsbGluZ19maWxlKSB7XG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gcnVuIHRoZSAncHJlcGFyZVN0YWNrVHJhY2UnIGZ1bmN0aW9uIGFib3ZlXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15KVxuICBkdW1teS5zdGFja1xuXG4gIC8vIGNsZWFudXBcbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBvcmlnUFNUXG4gIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IG9yaWdTVExcblxuICByZXR1cm4gZmlsZU5hbWVcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSByb290IGRpcmVjdG9yeSBvZiBhIG1vZHVsZSwgZ2l2ZW4gYW4gYXJiaXRyYXJ5IGZpbGVuYW1lXG4gKiBzb21ld2hlcmUgaW4gdGhlIG1vZHVsZSB0cmVlLiBUaGUgXCJyb290IGRpcmVjdG9yeVwiIGlzIHRoZSBkaXJlY3RvcnlcbiAqIGNvbnRhaW5pbmcgdGhlIGBwYWNrYWdlLmpzb25gIGZpbGUuXG4gKlxuICogICBJbjogIC9ob21lL25hdGUvbm9kZS1uYXRpdmUtbW9kdWxlL2xpYi9pbmRleC5qc1xuICogICBPdXQ6IC9ob21lL25hdGUvbm9kZS1uYXRpdmUtbW9kdWxlXG4gKi9cblxuZXhwb3J0cy5nZXRSb290ID0gZnVuY3Rpb24gZ2V0Um9vdCAoZmlsZSkge1xuICB2YXIgZGlyID0gZGlybmFtZShmaWxlKVxuICAgICwgcHJldlxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChkaXIgPT09ICcuJykge1xuICAgICAgLy8gQXZvaWRzIGFuIGluZmluaXRlIGxvb3AgaW4gcmFyZSBjYXNlcywgbGlrZSB0aGUgUkVQTFxuICAgICAgZGlyID0gcHJvY2Vzcy5jd2QoKVxuICAgIH1cbiAgICBpZiAoZXhpc3RzKGpvaW4oZGlyLCAncGFja2FnZS5qc29uJykpIHx8IGV4aXN0cyhqb2luKGRpciwgJ25vZGVfbW9kdWxlcycpKSkge1xuICAgICAgLy8gRm91bmQgdGhlICdwYWNrYWdlLmpzb24nIGZpbGUgb3IgJ25vZGVfbW9kdWxlcycgZGlyOyB3ZSdyZSBkb25lXG4gICAgICByZXR1cm4gZGlyXG4gICAgfVxuICAgIGlmIChwcmV2ID09PSBkaXIpIHtcbiAgICAgIC8vIEdvdCB0byB0aGUgdG9wXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIG1vZHVsZSByb290IGdpdmVuIGZpbGU6IFwiJyArIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgKyAnXCIuIERvIHlvdSBoYXZlIGEgYHBhY2thZ2UuanNvbmAgZmlsZT8gJylcbiAgICB9XG4gICAgLy8gVHJ5IHRoZSBwYXJlbnQgZGlyIG5leHRcbiAgICBwcmV2ID0gZGlyXG4gICAgZGlyID0gam9pbihkaXIsICcuLicpXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iaW5kaW5ncy9iaW5kaW5ncy5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * An auto incrementing id which we can use to create \"unique\" Ultron instances\n * so we can track the event emitters that are added through the Ultron\n * interface.\n *\n * @type {Number}\n * @private\n */\nvar id = 0;\n\n/**\n * Ultron is high-intelligence robot. It gathers intelligence so it can start improving\n * upon his rudimentary design. It will learn from your EventEmitting patterns\n * and exterminate them.\n *\n * @constructor\n * @param {EventEmitter} ee EventEmitter instance we need to wrap.\n * @api public\n */\nfunction Ultron(ee) {\n  if (!(this instanceof Ultron)) return new Ultron(ee);\n\n  this.id = id++;\n  this.ee = ee;\n}\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @returns {Ultron}\n * @api public\n */\nUltron.prototype.on = function on(event, fn, context) {\n  fn.__ultron = this.id;\n  this.ee.on(event, fn, context);\n\n  return this;\n};\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @returns {Ultron}\n * @api public\n */\nUltron.prototype.once = function once(event, fn, context) {\n  fn.__ultron = this.id;\n  this.ee.once(event, fn, context);\n\n  return this;\n};\n\n/**\n * Remove the listeners we assigned for the given event.\n *\n * @returns {Ultron}\n * @api public\n */\nUltron.prototype.remove = function remove() {\n  var args = arguments\n    , ee = this.ee\n    , event;\n\n  //\n  // When no event names are provided we assume that we need to clear all the\n  // events that were assigned through us.\n  //\n  if (args.length === 1 && 'string' === typeof args[0]) {\n    args = args[0].split(/[, ]+/);\n  } else if (!args.length) {\n    if (ee.eventNames) {\n      args = ee.eventNames();\n    } else if (ee._events) {\n      args = [];\n\n      for (event in ee._events) {\n        if (has.call(ee._events, event)) args.push(event);\n      }\n\n      if (Object.getOwnPropertySymbols) {\n        args = args.concat(Object.getOwnPropertySymbols(ee._events));\n      }\n    }\n  }\n\n  for (var i = 0; i < args.length; i++) {\n    var listeners = ee.listeners(args[i]);\n\n    for (var j = 0; j < listeners.length; j++) {\n      event = listeners[j];\n\n      //\n      // Once listeners have a `listener` property that stores the real listener\n      // in the EventEmitter that ships with Node.js.\n      //\n      if (event.listener) {\n        if (event.listener.__ultron !== this.id) continue;\n        delete event.listener.__ultron;\n      } else {\n        if (event.__ultron !== this.id) continue;\n        delete event.__ultron;\n      }\n\n      ee.removeListener(args[i], event);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Destroy the Ultron instance, remove all listeners and release all references.\n *\n * @returns {Boolean}\n * @api public\n */\nUltron.prototype.destroy = function destroy() {\n  if (!this.ee) return false;\n\n  this.remove();\n  this.ee = null;\n\n  return true;\n};\n\n//\n// Expose the module.\n//\nmodule.exports = Ultron;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vdWx0cm9uL2luZGV4LmpzPzk5ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBbiBhdXRvIGluY3JlbWVudGluZyBpZCB3aGljaCB3ZSBjYW4gdXNlIHRvIGNyZWF0ZSBcInVuaXF1ZVwiIFVsdHJvbiBpbnN0YW5jZXNcbiAqIHNvIHdlIGNhbiB0cmFjayB0aGUgZXZlbnQgZW1pdHRlcnMgdGhhdCBhcmUgYWRkZWQgdGhyb3VnaCB0aGUgVWx0cm9uXG4gKiBpbnRlcmZhY2UuXG4gKlxuICogQHR5cGUge051bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBpZCA9IDA7XG5cbi8qKlxuICogVWx0cm9uIGlzIGhpZ2gtaW50ZWxsaWdlbmNlIHJvYm90LiBJdCBnYXRoZXJzIGludGVsbGlnZW5jZSBzbyBpdCBjYW4gc3RhcnQgaW1wcm92aW5nXG4gKiB1cG9uIGhpcyBydWRpbWVudGFyeSBkZXNpZ24uIEl0IHdpbGwgbGVhcm4gZnJvbSB5b3VyIEV2ZW50RW1pdHRpbmcgcGF0dGVybnNcbiAqIGFuZCBleHRlcm1pbmF0ZSB0aGVtLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVlIEV2ZW50RW1pdHRlciBpbnN0YW5jZSB3ZSBuZWVkIHRvIHdyYXAuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBVbHRyb24oZWUpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVsdHJvbikpIHJldHVybiBuZXcgVWx0cm9uKGVlKTtcblxuICB0aGlzLmlkID0gaWQrKztcbiAgdGhpcy5lZSA9IGVlO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IEV2ZW50TGlzdGVuZXIgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgTmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge0Z1bmN0b259IGZuIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7VWx0cm9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuVWx0cm9uLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICBmbi5fX3VsdHJvbiA9IHRoaXMuaWQ7XG4gIHRoaXMuZWUub24oZXZlbnQsIGZuLCBjb250ZXh0KTtcblxuICByZXR1cm4gdGhpcztcbn07XG4vKipcbiAqIEFkZCBhbiBFdmVudExpc3RlbmVyIHRoYXQncyBvbmx5IGNhbGxlZCBvbmNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7VWx0cm9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuVWx0cm9uLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgZm4uX191bHRyb24gPSB0aGlzLmlkO1xuICB0aGlzLmVlLm9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgd2UgYXNzaWduZWQgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcmV0dXJucyB7VWx0cm9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuVWx0cm9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzXG4gICAgLCBlZSA9IHRoaXMuZWVcbiAgICAsIGV2ZW50O1xuXG4gIC8vXG4gIC8vIFdoZW4gbm8gZXZlbnQgbmFtZXMgYXJlIHByb3ZpZGVkIHdlIGFzc3VtZSB0aGF0IHdlIG5lZWQgdG8gY2xlYXIgYWxsIHRoZVxuICAvLyBldmVudHMgdGhhdCB3ZXJlIGFzc2lnbmVkIHRocm91Z2ggdXMuXG4gIC8vXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICBhcmdzID0gYXJnc1swXS5zcGxpdCgvWywgXSsvKTtcbiAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICBpZiAoZWUuZXZlbnROYW1lcykge1xuICAgICAgYXJncyA9IGVlLmV2ZW50TmFtZXMoKTtcbiAgICB9IGVsc2UgaWYgKGVlLl9ldmVudHMpIHtcbiAgICAgIGFyZ3MgPSBbXTtcblxuICAgICAgZm9yIChldmVudCBpbiBlZS5fZXZlbnRzKSB7XG4gICAgICAgIGlmIChoYXMuY2FsbChlZS5fZXZlbnRzLCBldmVudCkpIGFyZ3MucHVzaChldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGVlLl9ldmVudHMpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbGlzdGVuZXJzID0gZWUubGlzdGVuZXJzKGFyZ3NbaV0pO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsaXN0ZW5lcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGV2ZW50ID0gbGlzdGVuZXJzW2pdO1xuXG4gICAgICAvL1xuICAgICAgLy8gT25jZSBsaXN0ZW5lcnMgaGF2ZSBhIGBsaXN0ZW5lcmAgcHJvcGVydHkgdGhhdCBzdG9yZXMgdGhlIHJlYWwgbGlzdGVuZXJcbiAgICAgIC8vIGluIHRoZSBFdmVudEVtaXR0ZXIgdGhhdCBzaGlwcyB3aXRoIE5vZGUuanMuXG4gICAgICAvL1xuICAgICAgaWYgKGV2ZW50Lmxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChldmVudC5saXN0ZW5lci5fX3VsdHJvbiAhPT0gdGhpcy5pZCkgY29udGludWU7XG4gICAgICAgIGRlbGV0ZSBldmVudC5saXN0ZW5lci5fX3VsdHJvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChldmVudC5fX3VsdHJvbiAhPT0gdGhpcy5pZCkgY29udGludWU7XG4gICAgICAgIGRlbGV0ZSBldmVudC5fX3VsdHJvbjtcbiAgICAgIH1cblxuICAgICAgZWUucmVtb3ZlTGlzdGVuZXIoYXJnc1tpXSwgZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEZXN0cm95IHRoZSBVbHRyb24gaW5zdGFuY2UsIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGFuZCByZWxlYXNlIGFsbCByZWZlcmVuY2VzLlxuICpcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuVWx0cm9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgaWYgKCF0aGlzLmVlKSByZXR1cm4gZmFsc2U7XG5cbiAgdGhpcy5yZW1vdmUoKTtcbiAgdGhpcy5lZSA9IG51bGw7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xubW9kdWxlLmV4cG9ydHMgPSBVbHRyb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdWx0cm9uL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\ntry {\n  const bufferUtil = __webpack_require__(17);\n\n  module.exports = bufferUtil.BufferUtil || bufferUtil;\n} catch (e) {\n  module.exports = __webpack_require__(22);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vd3MvbGliL0J1ZmZlclV0aWwuanM/MzMzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIVxuICogd3M6IGEgbm9kZS5qcyB3ZWJzb2NrZXQgY2xpZW50XG4gKiBDb3B5cmlnaHQoYykgMjAxMSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnRyeSB7XG4gIGNvbnN0IGJ1ZmZlclV0aWwgPSByZXF1aXJlKCdidWZmZXJ1dGlsJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJVdGlsLkJ1ZmZlclV0aWwgfHwgYnVmZmVyVXRpbDtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL0J1ZmZlclV0aWwuZmFsbGJhY2snKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93cy9saWIvQnVmZmVyVXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\nmodule.exports = {\n  isValidErrorCode: function (code) {\n    return (code >= 1000 && code <= 1013 && code !== 1004 && code !== 1005 && code !== 1006) ||\n      (code >= 3000 && code <= 4999);\n  },\n  1000: 'normal',\n  1001: 'going away',\n  1002: 'protocol error',\n  1003: 'unsupported data',\n  1004: 'reserved',\n  1005: 'reserved for extensions',\n  1006: 'reserved for extensions',\n  1007: 'inconsistent or invalid data',\n  1008: 'policy violation',\n  1009: 'message too big',\n  1010: 'extension handshake missing',\n  1011: 'an unexpected condition prevented the request from being fulfilled',\n  1012: 'service restart',\n  1013: 'try again later'\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vd3MvbGliL0Vycm9yQ29kZXMuanM/M2NkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIHdzOiBhIG5vZGUuanMgd2Vic29ja2V0IGNsaWVudFxuICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1ZhbGlkRXJyb3JDb2RlOiBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiAoY29kZSA+PSAxMDAwICYmIGNvZGUgPD0gMTAxMyAmJiBjb2RlICE9PSAxMDA0ICYmIGNvZGUgIT09IDEwMDUgJiYgY29kZSAhPT0gMTAwNikgfHxcbiAgICAgIChjb2RlID49IDMwMDAgJiYgY29kZSA8PSA0OTk5KTtcbiAgfSxcbiAgMTAwMDogJ25vcm1hbCcsXG4gIDEwMDE6ICdnb2luZyBhd2F5JyxcbiAgMTAwMjogJ3Byb3RvY29sIGVycm9yJyxcbiAgMTAwMzogJ3Vuc3VwcG9ydGVkIGRhdGEnLFxuICAxMDA0OiAncmVzZXJ2ZWQnLFxuICAxMDA1OiAncmVzZXJ2ZWQgZm9yIGV4dGVuc2lvbnMnLFxuICAxMDA2OiAncmVzZXJ2ZWQgZm9yIGV4dGVuc2lvbnMnLFxuICAxMDA3OiAnaW5jb25zaXN0ZW50IG9yIGludmFsaWQgZGF0YScsXG4gIDEwMDg6ICdwb2xpY3kgdmlvbGF0aW9uJyxcbiAgMTAwOTogJ21lc3NhZ2UgdG9vIGJpZycsXG4gIDEwMTA6ICdleHRlbnNpb24gaGFuZHNoYWtlIG1pc3NpbmcnLFxuICAxMDExOiAnYW4gdW5leHBlY3RlZCBjb25kaXRpb24gcHJldmVudGVkIHRoZSByZXF1ZXN0IGZyb20gYmVpbmcgZnVsZmlsbGVkJyxcbiAgMTAxMjogJ3NlcnZpY2UgcmVzdGFydCcsXG4gIDEwMTM6ICd0cnkgYWdhaW4gbGF0ZXInXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3dzL2xpYi9FcnJvckNvZGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Module exports.\n */\n\nexports.parse = parse;\nexports.format = format;\n\n/**\n * Parse extensions header value\n */\n\nfunction parse (value) {\n  value = value || '';\n\n  var extensions = {};\n\n  value.split(',').forEach(function (v) {\n    var params = v.split(';');\n    var token = params.shift().trim();\n    var paramsList = extensions[token] = extensions[token] || [];\n    var parsedParams = {};\n\n    params.forEach(function (param) {\n      var parts = param.trim().split('=');\n      var key = parts[0];\n      var value = parts[1];\n      if (value === undefined) {\n        value = true;\n      } else {\n        // unquote value\n        if (value[0] === '\"') {\n          value = value.slice(1);\n        }\n        if (value[value.length - 1] === '\"') {\n          value = value.slice(0, value.length - 1);\n        }\n      }\n      (parsedParams[key] = parsedParams[key] || []).push(value);\n    });\n\n    paramsList.push(parsedParams);\n  });\n\n  return extensions;\n}\n\n/**\n * Format extensions header value\n */\n\nfunction format (value) {\n  return Object.keys(value).map(function (token) {\n    var paramsList = value[token];\n    if (!Array.isArray(paramsList)) {\n      paramsList = [paramsList];\n    }\n    return paramsList.map(function (params) {\n      return [token].concat(Object.keys(params).map(function (k) {\n        var p = params[k];\n        if (!Array.isArray(p)) p = [p];\n        return p.map(function (v) {\n          return v === true ? k : k + '=' + v;\n        }).join('; ');\n      })).join('; ');\n    }).join(', ');\n  }).join(', ');\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vd3MvbGliL0V4dGVuc2lvbnMuanM/NzBkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5mb3JtYXQgPSBmb3JtYXQ7XG5cbi8qKlxuICogUGFyc2UgZXh0ZW5zaW9ucyBoZWFkZXIgdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZSAodmFsdWUpIHtcbiAgdmFsdWUgPSB2YWx1ZSB8fCAnJztcblxuICB2YXIgZXh0ZW5zaW9ucyA9IHt9O1xuXG4gIHZhbHVlLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgIHZhciBwYXJhbXMgPSB2LnNwbGl0KCc7Jyk7XG4gICAgdmFyIHRva2VuID0gcGFyYW1zLnNoaWZ0KCkudHJpbSgpO1xuICAgIHZhciBwYXJhbXNMaXN0ID0gZXh0ZW5zaW9uc1t0b2tlbl0gPSBleHRlbnNpb25zW3Rva2VuXSB8fCBbXTtcbiAgICB2YXIgcGFyc2VkUGFyYW1zID0ge307XG5cbiAgICBwYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBwYXJ0cyA9IHBhcmFtLnRyaW0oKS5zcGxpdCgnPScpO1xuICAgICAgdmFyIGtleSA9IHBhcnRzWzBdO1xuICAgICAgdmFyIHZhbHVlID0gcGFydHNbMV07XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1bnF1b3RlIHZhbHVlXG4gICAgICAgIGlmICh2YWx1ZVswXSA9PT0gJ1wiJykge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnXCInKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCB2YWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKHBhcnNlZFBhcmFtc1trZXldID0gcGFyc2VkUGFyYW1zW2tleV0gfHwgW10pLnB1c2godmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcGFyYW1zTGlzdC5wdXNoKHBhcnNlZFBhcmFtcyk7XG4gIH0pO1xuXG4gIHJldHVybiBleHRlbnNpb25zO1xufVxuXG4vKipcbiAqIEZvcm1hdCBleHRlbnNpb25zIGhlYWRlciB2YWx1ZVxuICovXG5cbmZ1bmN0aW9uIGZvcm1hdCAodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5tYXAoZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgdmFyIHBhcmFtc0xpc3QgPSB2YWx1ZVt0b2tlbl07XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBhcmFtc0xpc3QpKSB7XG4gICAgICBwYXJhbXNMaXN0ID0gW3BhcmFtc0xpc3RdO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zTGlzdC5tYXAoZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgcmV0dXJuIFt0b2tlbl0uY29uY2F0KE9iamVjdC5rZXlzKHBhcmFtcykubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHZhciBwID0gcGFyYW1zW2tdO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocCkpIHAgPSBbcF07XG4gICAgICAgIHJldHVybiBwLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgICAgIHJldHVybiB2ID09PSB0cnVlID8gayA6IGsgKyAnPScgKyB2O1xuICAgICAgICB9KS5qb2luKCc7ICcpO1xuICAgICAgfSkpLmpvaW4oJzsgJyk7XG4gICAgfSkuam9pbignLCAnKTtcbiAgfSkuam9pbignLCAnKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93cy9saWIvRXh0ZW5zaW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\nconst PerMessageDeflate = __webpack_require__(0);\nconst isValidUTF8 = __webpack_require__(25);\nconst bufferUtil = __webpack_require__(7);\nconst ErrorCodes = __webpack_require__(8);\n\nconst EMPTY_BUFFER = Buffer.alloc(0);\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n */\nclass Receiver {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} extensions An object containing the negotiated extensions\n   * @param {Number} maxPayload The maximum allowed message length\n   */\n  constructor (extensions, maxPayload) {\n    this.extensions = extensions || {};\n    this.maxPayload = maxPayload | 0;\n\n    this.bufferedBytes = 0;\n    this.buffers = [];\n\n    this.compressed = false;\n    this.payloadLength = 0;\n    this.fragmented = 0;\n    this.masked = false;\n    this.fin = false;\n    this.mask = null;\n    this.opcode = 0;\n\n    this.totalPayloadLength = 0;\n    this.messageLength = 0;\n    this.fragments = [];\n\n    this.cleanupCallback = null;\n    this.hadError = false;\n    this.dead = false;\n    this.loop = false;\n\n    this.onmessage = null;\n    this.onclose = null;\n    this.onerror = null;\n    this.onping = null;\n    this.onpong = null;\n\n    this.state = GET_INFO;\n  }\n\n  /**\n   * Consumes bytes from the available buffered data.\n   *\n   * @param {Number} bytes The number of bytes to consume\n   * @return {Buffer} Consumed bytes\n   * @private\n   */\n  readBuffer (bytes) {\n    var offset = 0;\n    var dst;\n    var l;\n\n    this.bufferedBytes -= bytes;\n\n    if (bytes === this.buffers[0].length) return this.buffers.shift();\n\n    if (bytes < this.buffers[0].length) {\n      dst = this.buffers[0].slice(0, bytes);\n      this.buffers[0] = this.buffers[0].slice(bytes);\n      return dst;\n    }\n\n    dst = new Buffer(bytes);\n\n    while (bytes > 0) {\n      l = this.buffers[0].length;\n\n      if (bytes >= l) {\n        this.buffers[0].copy(dst, offset);\n        offset += l;\n        this.buffers.shift();\n      } else {\n        this.buffers[0].copy(dst, offset, 0, bytes);\n        this.buffers[0] = this.buffers[0].slice(bytes);\n      }\n\n      bytes -= l;\n    }\n\n    return dst;\n  }\n\n  /**\n   * Checks if the number of buffered bytes is bigger or equal than `n` and\n   * calls `cleanup` if necessary.\n   *\n   * @param {Number} n The number of bytes to check against\n   * @return {Boolean} `true` if `bufferedBytes >= n`, else `false`\n   * @private\n   */\n  hasBufferedBytes (n) {\n    if (this.bufferedBytes >= n) return true;\n\n    this.loop = false;\n    if (this.dead) this.cleanup(this.cleanupCallback);\n    return false;\n  }\n\n  /**\n   * Adds new data to the parser.\n   *\n   * @public\n   */\n  add (data) {\n    if (this.dead) return;\n\n    this.bufferedBytes += data.length;\n    this.buffers.push(data);\n    this.startLoop();\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @private\n   */\n  startLoop () {\n    this.loop = true;\n\n    while (this.loop) {\n      switch (this.state) {\n        case GET_INFO:\n          this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          this.getData();\n          break;\n        default: // `INFLATING`\n          this.loop = false;\n      }\n    }\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @private\n   */\n  getInfo () {\n    if (!this.hasBufferedBytes(2)) return;\n\n    const buf = this.readBuffer(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this.error(new Error('RSV2 and RSV3 must be clear'), 1002);\n      return;\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this.extensions[PerMessageDeflate.extensionName]) {\n      this.error(new Error('RSV1 must be clear'), 1002);\n      return;\n    }\n\n    this.fin = (buf[0] & 0x80) === 0x80;\n    this.opcode = buf[0] & 0x0f;\n    this.payloadLength = buf[1] & 0x7f;\n\n    if (this.opcode === 0x00) {\n      if (compressed) {\n        this.error(new Error('RSV1 must be clear'), 1002);\n        return;\n      }\n\n      if (!this.fragmented) {\n        this.error(new Error(`invalid opcode: ${this.opcode}`), 1002);\n        return;\n      } else {\n        this.opcode = this.fragmented;\n      }\n    } else if (this.opcode === 0x01 || this.opcode === 0x02) {\n      if (this.fragmented) {\n        this.error(new Error(`invalid opcode: ${this.opcode}`), 1002);\n        return;\n      }\n\n      this.compressed = compressed;\n    } else if (this.opcode > 0x07 && this.opcode < 0x0b) {\n      if (!this.fin) {\n        this.error(new Error('FIN must be set'), 1002);\n        return;\n      }\n\n      if (compressed) {\n        this.error(new Error('RSV1 must be clear'), 1002);\n        return;\n      }\n\n      if (this.payloadLength > 0x7d) {\n        this.error(new Error('invalid payload length'), 1002);\n        return;\n      }\n    } else {\n      this.error(new Error(`invalid opcode: ${this.opcode}`), 1002);\n      return;\n    }\n\n    if (!this.fin && !this.fragmented) this.fragmented = this.opcode;\n\n    this.masked = (buf[1] & 0x80) === 0x80;\n\n    if (this.payloadLength === 126) this.state = GET_PAYLOAD_LENGTH_16;\n    else if (this.payloadLength === 127) this.state = GET_PAYLOAD_LENGTH_64;\n    else this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @private\n   */\n  getPayloadLength16 () {\n    if (!this.hasBufferedBytes(2)) return;\n\n    this.payloadLength = this.readBuffer(2).readUInt16BE(0, true);\n    this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @private\n   */\n  getPayloadLength64 () {\n    if (!this.hasBufferedBytes(8)) return;\n\n    const buf = this.readBuffer(8);\n    const num = buf.readUInt32BE(0, true);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this.error(new Error('max payload size exceeded'), 1009);\n      return;\n    }\n\n    this.payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4, true);\n    this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @private\n   */\n  haveLength () {\n    if (this.opcode < 0x08 && this.maxPayloadExceeded(this.payloadLength)) {\n      return;\n    }\n\n    if (this.masked) this.state = GET_MASK;\n    else this.state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask () {\n    if (!this.hasBufferedBytes(4)) return;\n\n    this.mask = this.readBuffer(4);\n    this.state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @private\n   */\n  getData () {\n    var data = EMPTY_BUFFER;\n\n    if (this.payloadLength) {\n      if (!this.hasBufferedBytes(this.payloadLength)) return;\n\n      data = this.readBuffer(this.payloadLength);\n      if (this.masked) bufferUtil.unmask(data, this.mask);\n    }\n\n    if (this.opcode > 0x07) {\n      this.controlMessage(data);\n    } else if (this.compressed) {\n      this.state = INFLATING;\n      this.decompress(data);\n    } else if (this.pushFragment(data)) {\n      this.dataMessage();\n    }\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @private\n   */\n  decompress (data) {\n    const extension = this.extensions[PerMessageDeflate.extensionName];\n\n    extension.decompress(data, this.fin, (err, buf) => {\n      if (err) {\n        this.error(err, err.closeCode === 1009 ? 1009 : 1007);\n        return;\n      }\n\n      if (this.pushFragment(buf)) this.dataMessage();\n      this.startLoop();\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @private\n   */\n  dataMessage () {\n    if (this.fin) {\n      const buf = this.fragments.length > 1\n        ? Buffer.concat(this.fragments, this.messageLength)\n        : this.fragments.length === 1\n          ? this.fragments[0]\n          : EMPTY_BUFFER;\n\n      this.totalPayloadLength = 0;\n      this.fragments.length = 0;\n      this.messageLength = 0;\n      this.fragmented = 0;\n\n      if (this.opcode === 2) {\n        this.onmessage(buf, { masked: this.masked, binary: true });\n      } else {\n        if (!isValidUTF8(buf)) {\n          this.error(new Error('invalid utf8 sequence'), 1007);\n          return;\n        }\n\n        this.onmessage(buf.toString(), { masked: this.masked });\n      }\n    }\n\n    this.state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @private\n   */\n  controlMessage (data) {\n    if (this.opcode === 0x08) {\n      if (data.length === 0) {\n        this.onclose(1000, '', { masked: this.masked });\n        this.loop = false;\n        this.cleanup(this.cleanupCallback);\n      } else if (data.length === 1) {\n        this.error(new Error('invalid payload length'), 1002);\n      } else {\n        const code = data.readUInt16BE(0, true);\n\n        if (!ErrorCodes.isValidErrorCode(code)) {\n          this.error(new Error(`invalid status code: ${code}`), 1002);\n          return;\n        }\n\n        const buf = data.slice(2);\n\n        if (!isValidUTF8(buf)) {\n          this.error(new Error('invalid utf8 sequence'), 1007);\n          return;\n        }\n\n        this.onclose(code, buf.toString(), { masked: this.masked });\n        this.loop = false;\n        this.cleanup(this.cleanupCallback);\n      }\n\n      return;\n    }\n\n    const flags = { masked: this.masked, binary: true };\n\n    if (this.opcode === 0x09) this.onping(data, flags);\n    else this.onpong(data, flags);\n\n    this.state = GET_INFO;\n  }\n\n  /**\n   * Handles an error.\n   *\n   * @param {Error} err The error\n   * @param {Number} code Close code\n   * @private\n   */\n  error (err, code) {\n    this.onerror(err, code);\n    this.hadError = true;\n    this.loop = false;\n    this.cleanup(this.cleanupCallback);\n  }\n\n  /**\n   * Checks payload size, disconnects socket when it exceeds `maxPayload`.\n   *\n   * @param {Number} length Payload length\n   * @private\n   */\n  maxPayloadExceeded (length) {\n    if (length === 0 || this.maxPayload < 1) return false;\n\n    const fullLength = this.totalPayloadLength + length;\n\n    if (fullLength <= this.maxPayload) {\n      this.totalPayloadLength = fullLength;\n      return false;\n    }\n\n    this.error(new Error('max payload size exceeded'), 1009);\n    return true;\n  }\n\n  /**\n   * Appends a fragment in the fragments array after checking that the sum of\n   * fragment lengths does not exceed `maxPayload`.\n   *\n   * @param {Buffer} fragment The fragment to add\n   * @return {Boolean} `true` if `maxPayload` is not exceeded, else `false`\n   * @private\n   */\n  pushFragment (fragment) {\n    if (fragment.length === 0) return true;\n\n    const totalLength = this.messageLength + fragment.length;\n\n    if (this.maxPayload < 1 || totalLength <= this.maxPayload) {\n      this.messageLength = totalLength;\n      this.fragments.push(fragment);\n      return true;\n    }\n\n    this.error(new Error('max payload size exceeded'), 1009);\n    return false;\n  }\n\n  /**\n   * Releases resources used by the receiver.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  cleanup (cb) {\n    this.dead = true;\n\n    if (!this.hadError && (this.loop || this.state === INFLATING)) {\n      this.cleanupCallback = cb;\n    } else {\n      this.extensions = null;\n      this.fragments = null;\n      this.buffers = null;\n      this.mask = null;\n\n      this.cleanupCallback = null;\n      this.onmessage = null;\n      this.onclose = null;\n      this.onerror = null;\n      this.onping = null;\n      this.onpong = null;\n\n      if (cb) cb();\n    }\n  }\n}\n\nmodule.exports = Receiver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dzL2xpYi9SZWNlaXZlci5qcz81ZjIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogd3M6IGEgbm9kZS5qcyB3ZWJzb2NrZXQgY2xpZW50XG4gKiBDb3B5cmlnaHQoYykgMjAxMSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGVyTWVzc2FnZURlZmxhdGUgPSByZXF1aXJlKCcuL1Blck1lc3NhZ2VEZWZsYXRlJyk7XG5jb25zdCBpc1ZhbGlkVVRGOCA9IHJlcXVpcmUoJy4vVmFsaWRhdGlvbicpO1xuY29uc3QgYnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4vQnVmZmVyVXRpbCcpO1xuY29uc3QgRXJyb3JDb2RlcyA9IHJlcXVpcmUoJy4vRXJyb3JDb2RlcycpO1xuXG5jb25zdCBFTVBUWV9CVUZGRVIgPSBCdWZmZXIuYWxsb2MoMCk7XG5cbmNvbnN0IEdFVF9JTkZPID0gMDtcbmNvbnN0IEdFVF9QQVlMT0FEX0xFTkdUSF8xNiA9IDE7XG5jb25zdCBHRVRfUEFZTE9BRF9MRU5HVEhfNjQgPSAyO1xuY29uc3QgR0VUX01BU0sgPSAzO1xuY29uc3QgR0VUX0RBVEEgPSA0O1xuY29uc3QgSU5GTEFUSU5HID0gNTtcblxuLyoqXG4gKiBIeUJpIFJlY2VpdmVyIGltcGxlbWVudGF0aW9uLlxuICovXG5jbGFzcyBSZWNlaXZlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgUmVjZWl2ZXIgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBleHRlbnNpb25zIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBuZWdvdGlhdGVkIGV4dGVuc2lvbnNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1heFBheWxvYWQgVGhlIG1heGltdW0gYWxsb3dlZCBtZXNzYWdlIGxlbmd0aFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGV4dGVuc2lvbnMsIG1heFBheWxvYWQpIHtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zIHx8IHt9O1xuICAgIHRoaXMubWF4UGF5bG9hZCA9IG1heFBheWxvYWQgfCAwO1xuXG4gICAgdGhpcy5idWZmZXJlZEJ5dGVzID0gMDtcbiAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcblxuICAgIHRoaXMuY29tcHJlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucGF5bG9hZExlbmd0aCA9IDA7XG4gICAgdGhpcy5mcmFnbWVudGVkID0gMDtcbiAgICB0aGlzLm1hc2tlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmluID0gZmFsc2U7XG4gICAgdGhpcy5tYXNrID0gbnVsbDtcbiAgICB0aGlzLm9wY29kZSA9IDA7XG5cbiAgICB0aGlzLnRvdGFsUGF5bG9hZExlbmd0aCA9IDA7XG4gICAgdGhpcy5tZXNzYWdlTGVuZ3RoID0gMDtcbiAgICB0aGlzLmZyYWdtZW50cyA9IFtdO1xuXG4gICAgdGhpcy5jbGVhbnVwQ2FsbGJhY2sgPSBudWxsO1xuICAgIHRoaXMuaGFkRXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLmRlYWQgPSBmYWxzZTtcbiAgICB0aGlzLmxvb3AgPSBmYWxzZTtcblxuICAgIHRoaXMub25tZXNzYWdlID0gbnVsbDtcbiAgICB0aGlzLm9uY2xvc2UgPSBudWxsO1xuICAgIHRoaXMub25lcnJvciA9IG51bGw7XG4gICAgdGhpcy5vbnBpbmcgPSBudWxsO1xuICAgIHRoaXMub25wb25nID0gbnVsbDtcblxuICAgIHRoaXMuc3RhdGUgPSBHRVRfSU5GTztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdW1lcyBieXRlcyBmcm9tIHRoZSBhdmFpbGFibGUgYnVmZmVyZWQgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJ5dGVzIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gY29uc3VtZVxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9IENvbnN1bWVkIGJ5dGVzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZWFkQnVmZmVyIChieXRlcykge1xuICAgIHZhciBvZmZzZXQgPSAwO1xuICAgIHZhciBkc3Q7XG4gICAgdmFyIGw7XG5cbiAgICB0aGlzLmJ1ZmZlcmVkQnl0ZXMgLT0gYnl0ZXM7XG5cbiAgICBpZiAoYnl0ZXMgPT09IHRoaXMuYnVmZmVyc1swXS5sZW5ndGgpIHJldHVybiB0aGlzLmJ1ZmZlcnMuc2hpZnQoKTtcblxuICAgIGlmIChieXRlcyA8IHRoaXMuYnVmZmVyc1swXS5sZW5ndGgpIHtcbiAgICAgIGRzdCA9IHRoaXMuYnVmZmVyc1swXS5zbGljZSgwLCBieXRlcyk7XG4gICAgICB0aGlzLmJ1ZmZlcnNbMF0gPSB0aGlzLmJ1ZmZlcnNbMF0uc2xpY2UoYnl0ZXMpO1xuICAgICAgcmV0dXJuIGRzdDtcbiAgICB9XG5cbiAgICBkc3QgPSBuZXcgQnVmZmVyKGJ5dGVzKTtcblxuICAgIHdoaWxlIChieXRlcyA+IDApIHtcbiAgICAgIGwgPSB0aGlzLmJ1ZmZlcnNbMF0ubGVuZ3RoO1xuXG4gICAgICBpZiAoYnl0ZXMgPj0gbCkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnNbMF0uY29weShkc3QsIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSBsO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMuc2hpZnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYnVmZmVyc1swXS5jb3B5KGRzdCwgb2Zmc2V0LCAwLCBieXRlcyk7XG4gICAgICAgIHRoaXMuYnVmZmVyc1swXSA9IHRoaXMuYnVmZmVyc1swXS5zbGljZShieXRlcyk7XG4gICAgICB9XG5cbiAgICAgIGJ5dGVzIC09IGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIG51bWJlciBvZiBidWZmZXJlZCBieXRlcyBpcyBiaWdnZXIgb3IgZXF1YWwgdGhhbiBgbmAgYW5kXG4gICAqIGNhbGxzIGBjbGVhbnVwYCBpZiBuZWNlc3NhcnkuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gY2hlY2sgYWdhaW5zdFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYGJ1ZmZlcmVkQnl0ZXMgPj0gbmAsIGVsc2UgYGZhbHNlYFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFzQnVmZmVyZWRCeXRlcyAobikge1xuICAgIGlmICh0aGlzLmJ1ZmZlcmVkQnl0ZXMgPj0gbikgcmV0dXJuIHRydWU7XG5cbiAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5kZWFkKSB0aGlzLmNsZWFudXAodGhpcy5jbGVhbnVwQ2FsbGJhY2spO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG5ldyBkYXRhIHRvIHRoZSBwYXJzZXIuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZCAoZGF0YSkge1xuICAgIGlmICh0aGlzLmRlYWQpIHJldHVybjtcblxuICAgIHRoaXMuYnVmZmVyZWRCeXRlcyArPSBkYXRhLmxlbmd0aDtcbiAgICB0aGlzLmJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICB0aGlzLnN0YXJ0TG9vcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgcGFyc2luZyBsb29wLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhcnRMb29wICgpIHtcbiAgICB0aGlzLmxvb3AgPSB0cnVlO1xuXG4gICAgd2hpbGUgKHRoaXMubG9vcCkge1xuICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgR0VUX0lORk86XG4gICAgICAgICAgdGhpcy5nZXRJbmZvKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgR0VUX1BBWUxPQURfTEVOR1RIXzE2OlxuICAgICAgICAgIHRoaXMuZ2V0UGF5bG9hZExlbmd0aDE2KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgR0VUX1BBWUxPQURfTEVOR1RIXzY0OlxuICAgICAgICAgIHRoaXMuZ2V0UGF5bG9hZExlbmd0aDY0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgR0VUX01BU0s6XG4gICAgICAgICAgdGhpcy5nZXRNYXNrKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgR0VUX0RBVEE6XG4gICAgICAgICAgdGhpcy5nZXREYXRhKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIGBJTkZMQVRJTkdgXG4gICAgICAgICAgdGhpcy5sb29wID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBmaXJzdCB0d28gYnl0ZXMgb2YgYSBmcmFtZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldEluZm8gKCkge1xuICAgIGlmICghdGhpcy5oYXNCdWZmZXJlZEJ5dGVzKDIpKSByZXR1cm47XG5cbiAgICBjb25zdCBidWYgPSB0aGlzLnJlYWRCdWZmZXIoMik7XG5cbiAgICBpZiAoKGJ1ZlswXSAmIDB4MzApICE9PSAweDAwKSB7XG4gICAgICB0aGlzLmVycm9yKG5ldyBFcnJvcignUlNWMiBhbmQgUlNWMyBtdXN0IGJlIGNsZWFyJyksIDEwMDIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXByZXNzZWQgPSAoYnVmWzBdICYgMHg0MCkgPT09IDB4NDA7XG5cbiAgICBpZiAoY29tcHJlc3NlZCAmJiAhdGhpcy5leHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdKSB7XG4gICAgICB0aGlzLmVycm9yKG5ldyBFcnJvcignUlNWMSBtdXN0IGJlIGNsZWFyJyksIDEwMDIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZmluID0gKGJ1ZlswXSAmIDB4ODApID09PSAweDgwO1xuICAgIHRoaXMub3Bjb2RlID0gYnVmWzBdICYgMHgwZjtcbiAgICB0aGlzLnBheWxvYWRMZW5ndGggPSBidWZbMV0gJiAweDdmO1xuXG4gICAgaWYgKHRoaXMub3Bjb2RlID09PSAweDAwKSB7XG4gICAgICBpZiAoY29tcHJlc3NlZCkge1xuICAgICAgICB0aGlzLmVycm9yKG5ldyBFcnJvcignUlNWMSBtdXN0IGJlIGNsZWFyJyksIDEwMDIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5mcmFnbWVudGVkKSB7XG4gICAgICAgIHRoaXMuZXJyb3IobmV3IEVycm9yKGBpbnZhbGlkIG9wY29kZTogJHt0aGlzLm9wY29kZX1gKSwgMTAwMik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3Bjb2RlID0gdGhpcy5mcmFnbWVudGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5vcGNvZGUgPT09IDB4MDEgfHwgdGhpcy5vcGNvZGUgPT09IDB4MDIpIHtcbiAgICAgIGlmICh0aGlzLmZyYWdtZW50ZWQpIHtcbiAgICAgICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoYGludmFsaWQgb3Bjb2RlOiAke3RoaXMub3Bjb2RlfWApLCAxMDAyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbXByZXNzZWQgPSBjb21wcmVzc2VkO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcGNvZGUgPiAweDA3ICYmIHRoaXMub3Bjb2RlIDwgMHgwYikge1xuICAgICAgaWYgKCF0aGlzLmZpbikge1xuICAgICAgICB0aGlzLmVycm9yKG5ldyBFcnJvcignRklOIG11c3QgYmUgc2V0JyksIDEwMDIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChjb21wcmVzc2VkKSB7XG4gICAgICAgIHRoaXMuZXJyb3IobmV3IEVycm9yKCdSU1YxIG11c3QgYmUgY2xlYXInKSwgMTAwMik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucGF5bG9hZExlbmd0aCA+IDB4N2QpIHtcbiAgICAgICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoJ2ludmFsaWQgcGF5bG9hZCBsZW5ndGgnKSwgMTAwMik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoYGludmFsaWQgb3Bjb2RlOiAke3RoaXMub3Bjb2RlfWApLCAxMDAyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZmluICYmICF0aGlzLmZyYWdtZW50ZWQpIHRoaXMuZnJhZ21lbnRlZCA9IHRoaXMub3Bjb2RlO1xuXG4gICAgdGhpcy5tYXNrZWQgPSAoYnVmWzFdICYgMHg4MCkgPT09IDB4ODA7XG5cbiAgICBpZiAodGhpcy5wYXlsb2FkTGVuZ3RoID09PSAxMjYpIHRoaXMuc3RhdGUgPSBHRVRfUEFZTE9BRF9MRU5HVEhfMTY7XG4gICAgZWxzZSBpZiAodGhpcy5wYXlsb2FkTGVuZ3RoID09PSAxMjcpIHRoaXMuc3RhdGUgPSBHRVRfUEFZTE9BRF9MRU5HVEhfNjQ7XG4gICAgZWxzZSB0aGlzLmhhdmVMZW5ndGgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGV4dGVuZGVkIHBheWxvYWQgbGVuZ3RoICg3KzE2KS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFBheWxvYWRMZW5ndGgxNiAoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0J1ZmZlcmVkQnl0ZXMoMikpIHJldHVybjtcblxuICAgIHRoaXMucGF5bG9hZExlbmd0aCA9IHRoaXMucmVhZEJ1ZmZlcigyKS5yZWFkVUludDE2QkUoMCwgdHJ1ZSk7XG4gICAgdGhpcy5oYXZlTGVuZ3RoKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBleHRlbmRlZCBwYXlsb2FkIGxlbmd0aCAoNys2NCkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRQYXlsb2FkTGVuZ3RoNjQgKCkge1xuICAgIGlmICghdGhpcy5oYXNCdWZmZXJlZEJ5dGVzKDgpKSByZXR1cm47XG5cbiAgICBjb25zdCBidWYgPSB0aGlzLnJlYWRCdWZmZXIoOCk7XG4gICAgY29uc3QgbnVtID0gYnVmLnJlYWRVSW50MzJCRSgwLCB0cnVlKTtcblxuICAgIC8vXG4gICAgLy8gVGhlIG1heGltdW0gc2FmZSBpbnRlZ2VyIGluIEphdmFTY3JpcHQgaXMgMl41MyAtIDEuIEFuIGVycm9yIGlzIHJldHVybmVkXG4gICAgLy8gaWYgcGF5bG9hZCBsZW5ndGggaXMgZ3JlYXRlciB0aGFuIHRoaXMgbnVtYmVyLlxuICAgIC8vXG4gICAgaWYgKG51bSA+IE1hdGgucG93KDIsIDUzIC0gMzIpIC0gMSkge1xuICAgICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoJ21heCBwYXlsb2FkIHNpemUgZXhjZWVkZWQnKSwgMTAwOSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wYXlsb2FkTGVuZ3RoID0gbnVtICogTWF0aC5wb3coMiwgMzIpICsgYnVmLnJlYWRVSW50MzJCRSg0LCB0cnVlKTtcbiAgICB0aGlzLmhhdmVMZW5ndGgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXlsb2FkIGxlbmd0aCBoYXMgYmVlbiByZWFkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGF2ZUxlbmd0aCAoKSB7XG4gICAgaWYgKHRoaXMub3Bjb2RlIDwgMHgwOCAmJiB0aGlzLm1heFBheWxvYWRFeGNlZWRlZCh0aGlzLnBheWxvYWRMZW5ndGgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWFza2VkKSB0aGlzLnN0YXRlID0gR0VUX01BU0s7XG4gICAgZWxzZSB0aGlzLnN0YXRlID0gR0VUX0RBVEE7XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgbWFzayBieXRlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldE1hc2sgKCkge1xuICAgIGlmICghdGhpcy5oYXNCdWZmZXJlZEJ5dGVzKDQpKSByZXR1cm47XG5cbiAgICB0aGlzLm1hc2sgPSB0aGlzLnJlYWRCdWZmZXIoNCk7XG4gICAgdGhpcy5zdGF0ZSA9IEdFVF9EQVRBO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWRzIGRhdGEgYnl0ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXREYXRhICgpIHtcbiAgICB2YXIgZGF0YSA9IEVNUFRZX0JVRkZFUjtcblxuICAgIGlmICh0aGlzLnBheWxvYWRMZW5ndGgpIHtcbiAgICAgIGlmICghdGhpcy5oYXNCdWZmZXJlZEJ5dGVzKHRoaXMucGF5bG9hZExlbmd0aCkpIHJldHVybjtcblxuICAgICAgZGF0YSA9IHRoaXMucmVhZEJ1ZmZlcih0aGlzLnBheWxvYWRMZW5ndGgpO1xuICAgICAgaWYgKHRoaXMubWFza2VkKSBidWZmZXJVdGlsLnVubWFzayhkYXRhLCB0aGlzLm1hc2spO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wY29kZSA+IDB4MDcpIHtcbiAgICAgIHRoaXMuY29udHJvbE1lc3NhZ2UoZGF0YSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbXByZXNzZWQpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBJTkZMQVRJTkc7XG4gICAgICB0aGlzLmRlY29tcHJlc3MoZGF0YSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnB1c2hGcmFnbWVudChkYXRhKSkge1xuICAgICAgdGhpcy5kYXRhTWVzc2FnZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvbXByZXNzZXMgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgQ29tcHJlc3NlZCBkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkZWNvbXByZXNzIChkYXRhKSB7XG4gICAgY29uc3QgZXh0ZW5zaW9uID0gdGhpcy5leHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdO1xuXG4gICAgZXh0ZW5zaW9uLmRlY29tcHJlc3MoZGF0YSwgdGhpcy5maW4sIChlcnIsIGJ1ZikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICB0aGlzLmVycm9yKGVyciwgZXJyLmNsb3NlQ29kZSA9PT0gMTAwOSA/IDEwMDkgOiAxMDA3KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wdXNoRnJhZ21lbnQoYnVmKSkgdGhpcy5kYXRhTWVzc2FnZSgpO1xuICAgICAgdGhpcy5zdGFydExvb3AoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGEgZGF0YSBtZXNzYWdlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGF0YU1lc3NhZ2UgKCkge1xuICAgIGlmICh0aGlzLmZpbikge1xuICAgICAgY29uc3QgYnVmID0gdGhpcy5mcmFnbWVudHMubGVuZ3RoID4gMVxuICAgICAgICA/IEJ1ZmZlci5jb25jYXQodGhpcy5mcmFnbWVudHMsIHRoaXMubWVzc2FnZUxlbmd0aClcbiAgICAgICAgOiB0aGlzLmZyYWdtZW50cy5sZW5ndGggPT09IDFcbiAgICAgICAgICA/IHRoaXMuZnJhZ21lbnRzWzBdXG4gICAgICAgICAgOiBFTVBUWV9CVUZGRVI7XG5cbiAgICAgIHRoaXMudG90YWxQYXlsb2FkTGVuZ3RoID0gMDtcbiAgICAgIHRoaXMuZnJhZ21lbnRzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLm1lc3NhZ2VMZW5ndGggPSAwO1xuICAgICAgdGhpcy5mcmFnbWVudGVkID0gMDtcblxuICAgICAgaWYgKHRoaXMub3Bjb2RlID09PSAyKSB7XG4gICAgICAgIHRoaXMub25tZXNzYWdlKGJ1ZiwgeyBtYXNrZWQ6IHRoaXMubWFza2VkLCBiaW5hcnk6IHRydWUgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWlzVmFsaWRVVEY4KGJ1ZikpIHtcbiAgICAgICAgICB0aGlzLmVycm9yKG5ldyBFcnJvcignaW52YWxpZCB1dGY4IHNlcXVlbmNlJyksIDEwMDcpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25tZXNzYWdlKGJ1Zi50b1N0cmluZygpLCB7IG1hc2tlZDogdGhpcy5tYXNrZWQgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IEdFVF9JTkZPO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYSBjb250cm9sIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIERhdGEgdG8gaGFuZGxlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb250cm9sTWVzc2FnZSAoZGF0YSkge1xuICAgIGlmICh0aGlzLm9wY29kZSA9PT0gMHgwOCkge1xuICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMub25jbG9zZSgxMDAwLCAnJywgeyBtYXNrZWQ6IHRoaXMubWFza2VkIH0pO1xuICAgICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jbGVhbnVwKHRoaXMuY2xlYW51cENhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoJ2ludmFsaWQgcGF5bG9hZCBsZW5ndGgnKSwgMTAwMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjb2RlID0gZGF0YS5yZWFkVUludDE2QkUoMCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKCFFcnJvckNvZGVzLmlzVmFsaWRFcnJvckNvZGUoY29kZSkpIHtcbiAgICAgICAgICB0aGlzLmVycm9yKG5ldyBFcnJvcihgaW52YWxpZCBzdGF0dXMgY29kZTogJHtjb2RlfWApLCAxMDAyKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBidWYgPSBkYXRhLnNsaWNlKDIpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZFVURjgoYnVmKSkge1xuICAgICAgICAgIHRoaXMuZXJyb3IobmV3IEVycm9yKCdpbnZhbGlkIHV0Zjggc2VxdWVuY2UnKSwgMTAwNyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbmNsb3NlKGNvZGUsIGJ1Zi50b1N0cmluZygpLCB7IG1hc2tlZDogdGhpcy5tYXNrZWQgfSk7XG4gICAgICAgIHRoaXMubG9vcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNsZWFudXAodGhpcy5jbGVhbnVwQ2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZmxhZ3MgPSB7IG1hc2tlZDogdGhpcy5tYXNrZWQsIGJpbmFyeTogdHJ1ZSB9O1xuXG4gICAgaWYgKHRoaXMub3Bjb2RlID09PSAweDA5KSB0aGlzLm9ucGluZyhkYXRhLCBmbGFncyk7XG4gICAgZWxzZSB0aGlzLm9ucG9uZyhkYXRhLCBmbGFncyk7XG5cbiAgICB0aGlzLnN0YXRlID0gR0VUX0lORk87XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhbiBlcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtFcnJvcn0gZXJyIFRoZSBlcnJvclxuICAgKiBAcGFyYW0ge051bWJlcn0gY29kZSBDbG9zZSBjb2RlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBlcnJvciAoZXJyLCBjb2RlKSB7XG4gICAgdGhpcy5vbmVycm9yKGVyciwgY29kZSk7XG4gICAgdGhpcy5oYWRFcnJvciA9IHRydWU7XG4gICAgdGhpcy5sb29wID0gZmFsc2U7XG4gICAgdGhpcy5jbGVhbnVwKHRoaXMuY2xlYW51cENhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgcGF5bG9hZCBzaXplLCBkaXNjb25uZWN0cyBzb2NrZXQgd2hlbiBpdCBleGNlZWRzIGBtYXhQYXlsb2FkYC5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCBQYXlsb2FkIGxlbmd0aFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbWF4UGF5bG9hZEV4Y2VlZGVkIChsZW5ndGgpIHtcbiAgICBpZiAobGVuZ3RoID09PSAwIHx8IHRoaXMubWF4UGF5bG9hZCA8IDEpIHJldHVybiBmYWxzZTtcblxuICAgIGNvbnN0IGZ1bGxMZW5ndGggPSB0aGlzLnRvdGFsUGF5bG9hZExlbmd0aCArIGxlbmd0aDtcblxuICAgIGlmIChmdWxsTGVuZ3RoIDw9IHRoaXMubWF4UGF5bG9hZCkge1xuICAgICAgdGhpcy50b3RhbFBheWxvYWRMZW5ndGggPSBmdWxsTGVuZ3RoO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuZXJyb3IobmV3IEVycm9yKCdtYXggcGF5bG9hZCBzaXplIGV4Y2VlZGVkJyksIDEwMDkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgYSBmcmFnbWVudCBpbiB0aGUgZnJhZ21lbnRzIGFycmF5IGFmdGVyIGNoZWNraW5nIHRoYXQgdGhlIHN1bSBvZlxuICAgKiBmcmFnbWVudCBsZW5ndGhzIGRvZXMgbm90IGV4Y2VlZCBgbWF4UGF5bG9hZGAuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBmcmFnbWVudCBUaGUgZnJhZ21lbnQgdG8gYWRkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiBgbWF4UGF5bG9hZGAgaXMgbm90IGV4Y2VlZGVkLCBlbHNlIGBmYWxzZWBcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHB1c2hGcmFnbWVudCAoZnJhZ21lbnQpIHtcbiAgICBpZiAoZnJhZ21lbnQubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcblxuICAgIGNvbnN0IHRvdGFsTGVuZ3RoID0gdGhpcy5tZXNzYWdlTGVuZ3RoICsgZnJhZ21lbnQubGVuZ3RoO1xuXG4gICAgaWYgKHRoaXMubWF4UGF5bG9hZCA8IDEgfHwgdG90YWxMZW5ndGggPD0gdGhpcy5tYXhQYXlsb2FkKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VMZW5ndGggPSB0b3RhbExlbmd0aDtcbiAgICAgIHRoaXMuZnJhZ21lbnRzLnB1c2goZnJhZ21lbnQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoJ21heCBwYXlsb2FkIHNpemUgZXhjZWVkZWQnKSwgMTAwOSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIHJlc291cmNlcyB1c2VkIGJ5IHRoZSByZWNlaXZlci5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY2xlYW51cCAoY2IpIHtcbiAgICB0aGlzLmRlYWQgPSB0cnVlO1xuXG4gICAgaWYgKCF0aGlzLmhhZEVycm9yICYmICh0aGlzLmxvb3AgfHwgdGhpcy5zdGF0ZSA9PT0gSU5GTEFUSU5HKSkge1xuICAgICAgdGhpcy5jbGVhbnVwQ2FsbGJhY2sgPSBjYjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5leHRlbnNpb25zID0gbnVsbDtcbiAgICAgIHRoaXMuZnJhZ21lbnRzID0gbnVsbDtcbiAgICAgIHRoaXMuYnVmZmVycyA9IG51bGw7XG4gICAgICB0aGlzLm1hc2sgPSBudWxsO1xuXG4gICAgICB0aGlzLmNsZWFudXBDYWxsYmFjayA9IG51bGw7XG4gICAgICB0aGlzLm9ubWVzc2FnZSA9IG51bGw7XG4gICAgICB0aGlzLm9uY2xvc2UgPSBudWxsO1xuICAgICAgdGhpcy5vbmVycm9yID0gbnVsbDtcbiAgICAgIHRoaXMub25waW5nID0gbnVsbDtcbiAgICAgIHRoaXMub25wb25nID0gbnVsbDtcblxuICAgICAgaWYgKGNiKSBjYigpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlY2VpdmVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3dzL2xpYi9SZWNlaXZlci5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\nconst crypto = __webpack_require__(1);\n\nconst PerMessageDeflate = __webpack_require__(0);\nconst bufferUtil = __webpack_require__(7);\nconst ErrorCodes = __webpack_require__(8);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {net.Socket} socket The connection socket\n   * @param {Object} extensions An object containing the negotiated extensions\n   */\n  constructor (socket, extensions) {\n    this.perMessageDeflate = (extensions || {})[PerMessageDeflate.extensionName];\n    this._socket = socket;\n\n    this.firstFragment = true;\n    this.compress = false;\n\n    this.bufferedBytes = 0;\n    this.deflating = false;\n    this.queue = [];\n\n    this.onerror = null;\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {(Number|undefined)} code The status code component of the body\n   * @param {String} data The message component of the body\n   * @param {Boolean} mask Specifies whether or not to mask the message\n   * @param {Function} cb Callback\n   * @public\n   */\n  close (code, data, mask, cb) {\n    if (code !== undefined && (typeof code !== 'number' || !ErrorCodes.isValidErrorCode(code))) {\n      throw new Error('first argument must be a valid error code number');\n    }\n\n    const buf = Buffer.allocUnsafe(2 + (data ? Buffer.byteLength(data) : 0));\n\n    buf.writeUInt16BE(code || 1000, 0, true);\n    if (buf.length > 2) buf.write(data, 2);\n\n    if (this.deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @private\n   */\n  doClose (data, mask, cb) {\n    this.frameAndSend(data, {\n      readOnly: false,\n      opcode: 0x08,\n      rsv1: false,\n      fin: true,\n      mask\n    }, cb);\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @public\n   */\n  ping (data, mask) {\n    var readOnly = true;\n\n    if (data && !Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this.deflating) {\n      this.enqueue([this.doPing, data, mask, readOnly]);\n    } else {\n      this.doPing(data, mask, readOnly);\n    }\n  }\n\n  /**\n   * Frames and sends a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @private\n   */\n  doPing (data, mask, readOnly) {\n    this.frameAndSend(data, {\n      opcode: 0x09,\n      rsv1: false,\n      fin: true,\n      readOnly,\n      mask\n    });\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @public\n   */\n  pong (data, mask) {\n    var readOnly = true;\n\n    if (data && !Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this.deflating) {\n      this.enqueue([this.doPong, data, mask, readOnly]);\n    } else {\n      this.doPong(data, mask, readOnly);\n    }\n  }\n\n  /**\n   * Frames and sends a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @private\n   */\n  doPong (data, mask, readOnly) {\n    this.frameAndSend(data, {\n      opcode: 0x0a,\n      rsv1: false,\n      fin: true,\n      readOnly,\n      mask\n    });\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */\n  send (data, options, cb) {\n    var opcode = options.binary ? 2 : 1;\n    var rsv1 = options.compress;\n    var readOnly = true;\n\n    if (data && !Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this.firstFragment) {\n      this.firstFragment = false;\n      if (rsv1 && data && this.perMessageDeflate) {\n        rsv1 = data.length >= this.perMessageDeflate.threshold;\n      }\n      this.compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this.firstFragment = true;\n\n    if (this.perMessageDeflate) {\n      const opts = {\n        compress: this.compress,\n        mask: options.mask,\n        fin: options.fin,\n        readOnly,\n        opcode,\n        rsv1\n      };\n\n      if (this.deflating) {\n        this.enqueue([this.dispatch, data, opts, cb]);\n      } else {\n        this.dispatch(data, opts, cb);\n      }\n    } else {\n      this.frameAndSend(data, {\n        mask: options.mask,\n        fin: options.fin,\n        rsv1: false,\n        readOnly,\n        opcode\n      }, cb);\n    }\n  }\n\n  /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @param {Function} cb Callback\n   * @private\n   */\n  dispatch (data, options, cb) {\n    if (!options.compress) {\n      this.frameAndSend(data, options, cb);\n      return;\n    }\n\n    this.deflating = true;\n    this.perMessageDeflate.compress(data, options.fin, (err, buf) => {\n      if (err) {\n        if (cb) cb(err);\n        else this.onerror(err);\n        return;\n      }\n\n      options.readOnly = false;\n      this.frameAndSend(buf, options, cb);\n      this.deflating = false;\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Frames and sends a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to send\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @param {Function} cb Callback\n   * @private\n   */\n  frameAndSend (data, options, cb) {\n    if (!data) {\n      const bytes = [options.opcode, 0];\n\n      if (options.fin) bytes[0] |= 0x80;\n      if (options.mask) {\n        bytes[1] |= 0x80;\n        bytes.push(0, 0, 0, 0);\n      }\n\n      sendFramedData(this, Buffer.from(bytes), null, cb);\n      return;\n    }\n\n    const mergeBuffers = data.length < 1024 || options.mask && options.readOnly;\n    var dataOffset = options.mask ? 6 : 2;\n    var payloadLength = data.length;\n\n    if (data.length >= 65536) {\n      dataOffset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      dataOffset += 2;\n      payloadLength = 126;\n    }\n\n    const outputBuffer = Buffer.allocUnsafe(\n      mergeBuffers ? data.length + dataOffset : dataOffset\n    );\n\n    outputBuffer[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) outputBuffer[0] |= 0x40;\n\n    if (payloadLength === 126) {\n      outputBuffer.writeUInt16BE(data.length, 2, true);\n    } else if (payloadLength === 127) {\n      outputBuffer.writeUInt32BE(0, 2, true);\n      outputBuffer.writeUInt32BE(data.length, 6, true);\n    }\n\n    if (options.mask) {\n      const mask = getRandomMask();\n\n      outputBuffer[1] = payloadLength | 0x80;\n      outputBuffer[dataOffset - 4] = mask[0];\n      outputBuffer[dataOffset - 3] = mask[1];\n      outputBuffer[dataOffset - 2] = mask[2];\n      outputBuffer[dataOffset - 1] = mask[3];\n\n      if (mergeBuffers) {\n        bufferUtil.mask(data, mask, outputBuffer, dataOffset, data.length);\n      } else {\n        bufferUtil.mask(data, mask, data, 0, data.length);\n      }\n    } else {\n      outputBuffer[1] = payloadLength;\n      if (mergeBuffers) data.copy(outputBuffer, dataOffset);\n    }\n\n    sendFramedData(this, outputBuffer, mergeBuffers ? null : data, cb);\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue () {\n    while (!this.deflating && this.queue.length) {\n      const params = this.queue.shift();\n\n      if (params[1]) this.bufferedBytes -= params[1].length;\n      params[0].apply(this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue (params) {\n    if (params[1]) this.bufferedBytes += params[1].length;\n    this.queue.push(params);\n  }\n}\n\nmodule.exports = Sender;\n\n/**\n * Converts an `ArrayBuffer` view into a buffer.\n *\n * @param {(DataView|TypedArray)} view The view to convert\n * @return {Buffer} Converted view\n * @private\n */\nfunction viewToBuffer (view) {\n  const buf = Buffer.from(view.buffer);\n\n  if (view.byteLength !== view.buffer.byteLength) {\n    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);\n  }\n\n  return buf;\n}\n\n/**\n * Generates a random mask.\n *\n * @return {Buffer} The mask\n * @private\n */\nfunction getRandomMask () {\n  return crypto.randomBytes(4);\n}\n\n/**\n * Sends a frame.\n *\n * @param {Sender} sender Sender instance\n * @param {Buffer} outputBuffer The data to send\n * @param {Buffer} data Additional data to send if frame is split into two buffers\n * @param {Function} cb Callback\n * @private\n */\nfunction sendFramedData (sender, outputBuffer, data, cb) {\n  if (data) {\n    sender._socket.write(outputBuffer);\n    sender._socket.write(data, cb);\n  } else {\n    sender._socket.write(outputBuffer, cb);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\nconst EventEmitter = __webpack_require__(13);\nconst crypto = __webpack_require__(1);\nconst Ultron = __webpack_require__(6);\nconst https = __webpack_require__(29);\nconst http = __webpack_require__(2);\nconst url = __webpack_require__(3);\n\nconst PerMessageDeflate = __webpack_require__(0);\nconst EventTarget = __webpack_require__(23);\nconst Extensions = __webpack_require__(9);\nconst Receiver = __webpack_require__(10);\nconst Sender = __webpack_require__(11);\n\nconst GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\nconst closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.\nconst protocolVersion = 13;\nconst noop = () => {};\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {String} address The URL to which to connect\n   * @param {(String|String[])} protocols The subprotocols\n   * @param {Object} options Connection options\n   */\n  constructor (address, protocols, options) {\n    super();\n\n    if (typeof protocols === 'object' && !Array.isArray(protocols)) {\n      options = protocols;\n      protocols = null;\n    }\n\n    if (typeof protocols === 'string') protocols = [protocols];\n    if (!Array.isArray(protocols)) protocols = [];\n\n    this.readyState = WebSocket.CONNECTING;\n    this.bytesReceived = 0;\n    this.extensions = {};\n    this.protocol = '';\n\n    this._finalize = this.finalize.bind(this);\n    this._binaryType = 'nodebuffer';\n    this._finalizeCalled = false;\n    this._closeMessage = null;\n    this._closeTimer = null;\n    this._closeCode = null;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n    this._ultron = null;\n\n    if (Array.isArray(address)) {\n      initAsServerClient.call(this, address[0], address[1], address[2], options);\n    } else {\n      initAsClient.call(this, address, protocols, options);\n    }\n  }\n\n  get CONNECTING () { return WebSocket.CONNECTING; }\n  get CLOSING () { return WebSocket.CLOSING; }\n  get CLOSED () { return WebSocket.CLOSED; }\n  get OPEN () { return WebSocket.OPEN; }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount () {\n    var amount = 0;\n\n    if (this._socket) {\n      amount = this._socket.bufferSize + this._sender.bufferedBytes;\n    }\n    return amount;\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the required\n   * default \"blob\" type (instead we define a custom \"nodebuffer\" type).\n   *\n   * @type {String}\n   */\n  get binaryType () {\n    return this._binaryType;\n  }\n\n  set binaryType (type) {\n    if (type === 'arraybuffer' || type === 'nodebuffer') {\n      this._binaryType = type;\n    } else {\n      throw new SyntaxError('unsupported binaryType: must be either \"nodebuffer\" or \"arraybuffer\"');\n    }\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @private\n   */\n  setSocket (socket, head) {\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    this._receiver = new Receiver(this.extensions, this.maxPayload);\n    this._sender = new Sender(socket, this.extensions);\n    this._ultron = new Ultron(socket);\n    this._socket = socket;\n\n    // socket cleanup handlers\n    this._ultron.on('close', this._finalize);\n    this._ultron.on('error', this._finalize);\n    this._ultron.on('end', this._finalize);\n\n    // ensure that the head is added to the receiver\n    if (head && head.length > 0) {\n      socket.unshift(head);\n      head = null;\n    }\n\n    // subsequent packets are pushed to the receiver\n    this._ultron.on('data', (data) => {\n      this.bytesReceived += data.length;\n      this._receiver.add(data);\n    });\n\n    // receiver event handlers\n    this._receiver.onmessage = (data, flags) => this.emit('message', data, flags);\n    this._receiver.onping = (data, flags) => {\n      this.pong(data, !this._isServer, true);\n      this.emit('ping', data, flags);\n    };\n    this._receiver.onpong = (data, flags) => this.emit('pong', data, flags);\n    this._receiver.onclose = (code, reason) => {\n      this._closeMessage = reason;\n      this._closeCode = code;\n      this.close(code, reason);\n    };\n    this._receiver.onerror = (error, code) => {\n      // close the connection when the receiver reports a HyBi error code\n      this.close(code, '');\n      this.emit('error', error);\n    };\n\n    // sender event handlers\n    this._sender.onerror = (error) => {\n      this.close(1002, '');\n      this.emit('error', error);\n    };\n\n    this.readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Clean up and release internal resources.\n   *\n   * @param {(Boolean|Error)} Indicates whether or not an error occurred\n   * @private\n   */\n  finalize (error) {\n    if (this._finalizeCalled) return;\n\n    this.readyState = WebSocket.CLOSING;\n    this._finalizeCalled = true;\n\n    clearTimeout(this._closeTimer);\n    this._closeTimer = null;\n\n    //\n    // If the connection was closed abnormally (with an error), or if the close\n    // control frame was malformed or not received then the close code must be\n    // 1006.\n    //\n    if (error) this._closeCode = 1006;\n\n    if (this._socket) {\n      this._ultron.destroy();\n      this._socket.on('error', function onerror () {\n        this.destroy();\n      });\n\n      if (!error) this._socket.end();\n      else this._socket.destroy();\n\n      this._socket = null;\n      this._ultron = null;\n    }\n\n    if (this._sender) {\n      this._sender = this._sender.onerror = null;\n    }\n\n    if (this._receiver) {\n      this._receiver.cleanup(() => this.emitClose());\n      this._receiver = null;\n    } else {\n      this.emitClose();\n    }\n  }\n\n  /**\n   * Emit the `close` event.\n   *\n   * @private\n   */\n  emitClose () {\n    this.readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode || 1006, this._closeMessage || '');\n\n    if (this.extensions[PerMessageDeflate.extensionName]) {\n      this.extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this.extensions = null;\n\n    this.removeAllListeners();\n    this.on('error', noop); // Catch all errors after this.\n  }\n\n  /**\n   * Pause the socket stream.\n   *\n   * @public\n   */\n  pause () {\n    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');\n\n    this._socket.pause();\n  }\n\n  /**\n   * Resume the socket stream\n   *\n   * @public\n   */\n  resume () {\n    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');\n\n    this._socket.resume();\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   * @param {Number} code Status code explaining why the connection is closing\n   * @param {String} data A string explaining why the connection is closing\n   * @public\n   */\n  close (code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      if (this._req && !this._req.aborted) {\n        this._req.abort();\n        this.emit('error', new Error('closed before the connection is established'));\n        this.finalize(true);\n      }\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeCode) this.terminate();\n      return;\n    }\n\n    this.readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      if (err) this.emit('error', err);\n\n      if (this._closeCode) {\n        this.terminate();\n      } else {\n        //\n        // Ensure that the connection is cleaned up even when the closing\n        // handshake fails.\n        //\n        clearTimeout(this._closeTimer);\n        this._closeTimer = setTimeout(this._finalize, closeTimeout, true);\n      }\n    });\n  }\n\n  /**\n   * Send a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`\n   * @public\n   */\n  ping (data, mask, failSilently) {\n    if (this.readyState !== WebSocket.OPEN) {\n      if (failSilently) return;\n      throw new Error('not opened');\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data, mask);\n  }\n\n  /**\n   * Send a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`\n   * @public\n   */\n  pong (data, mask, failSilently) {\n    if (this.readyState !== WebSocket.OPEN) {\n      if (failSilently) return;\n      throw new Error('not opened');\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data, mask);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when data is written out\n   * @public\n   */\n  send (data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      if (cb) cb(new Error('not opened'));\n      else throw new Error('not opened');\n      return;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    else if (!data) data = '';\n\n    const opts = Object.assign({\n      fin: true,\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true\n    }, options);\n\n    if (!this.extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data, opts, cb);\n  }\n\n  /**\n   * Half-close the socket sending a FIN packet.\n   *\n   * @public\n   */\n  terminate () {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      if (this._req && !this._req.aborted) {\n        this._req.abort();\n        this.emit('error', new Error('closed before the connection is established'));\n        this.finalize(true);\n      }\n      return;\n    }\n\n    if (this._socket) {\n      this.readyState = WebSocket.CLOSING;\n      this._socket.end();\n\n      //\n      // Add a timeout to ensure that the connection is completely cleaned up\n      // within 30 seconds, even if the other peer does not send a FIN packet.\n      //\n      clearTimeout(this._closeTimer);\n      this._closeTimer = setTimeout(this._finalize, closeTimeout, true);\n    }\n  }\n}\n\nWebSocket.CONNECTING = 0;\nWebSocket.OPEN = 1;\nWebSocket.CLOSING = 2;\nWebSocket.CLOSED = 3;\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    /**\n     * Return the listener of the event.\n     *\n     * @return {(Function|undefined)} The event listener or `undefined`\n     * @public\n     */\n    get () {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        if (listeners[i]._listener) return listeners[i]._listener;\n      }\n    },\n    /**\n     * Add a listener for the event.\n     *\n     * @param {Function} listener The listener to add\n     * @public\n     */\n    set (listener) {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        //\n        // Remove only the listeners added via `addEventListener`.\n        //\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n      }\n      this.addEventListener(method, listener);\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = EventTarget.addEventListener;\nWebSocket.prototype.removeEventListener = EventTarget.removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket server client.\n *\n * @param {http.IncomingMessage} req The request object\n * @param {net.Socket} socket The network socket between the server and client\n * @param {Buffer} head The first packet of the upgraded stream\n * @param {Object} options WebSocket attributes\n * @param {Number} options.protocolVersion The WebSocket protocol version\n * @param {Object} options.extensions The negotiated extensions\n * @param {Number} options.maxPayload The maximum allowed message size\n * @param {String} options.protocol The chosen subprotocol\n * @private\n */\nfunction initAsServerClient (req, socket, head, options) {\n  this.protocolVersion = options.protocolVersion;\n  this.extensions = options.extensions;\n  this.maxPayload = options.maxPayload;\n  this.protocol = options.protocol;\n\n  this.upgradeReq = req;\n  this._isServer = true;\n\n  this.setSocket(socket, head);\n}\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {String} address The URL to which to connect\n * @param {String[]} protocols The list of subprotocols\n * @param {Object} options Connection options\n * @param {String} options.protocol Value of the `Sec-WebSocket-Protocol` header\n * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n * @param {String} options.localAddress Local interface to bind for network connections\n * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header\n * @param {Object} options.headers An object containing request headers\n * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header\n * @param {http.Agent} options.agent Use the specified Agent\n * @param {String} options.host Value of the `Host` header\n * @param {Number} options.family IP address family to use during hostname lookup (4 or 6).\n * @param {Function} options.checkServerIdentity A function to validate the server hostname\n * @param {Boolean} options.rejectUnauthorized Verify or not the server certificate\n * @param {String} options.passphrase The passphrase for the private key or pfx\n * @param {String} options.ciphers The ciphers to use or exclude\n * @param {(String|String[]|Buffer|Buffer[])} options.cert The certificate key\n * @param {(String|String[]|Buffer|Buffer[])} options.key The private key\n * @param {(String|Buffer)} options.pfx The private key, certificate, and CA certs\n * @param {(String|String[]|Buffer|Buffer[])} options.ca Trusted certificates\n * @private\n */\nfunction initAsClient (address, protocols, options) {\n  options = Object.assign({\n    protocol: protocols.join(','),\n    perMessageDeflate: true,\n    localAddress: null,\n    protocolVersion,\n    headers: null,\n    origin: null,\n    agent: null,\n    host: null,\n    family: null,\n\n    //\n    // SSL options.\n    //\n    checkServerIdentity: null,\n    rejectUnauthorized: null,\n    passphrase: null,\n    ciphers: null,\n    cert: null,\n    key: null,\n    pfx: null,\n    ca: null\n  }, options);\n\n  if (options.protocolVersion !== 8 && options.protocolVersion !== 13) {\n    throw new Error('unsupported protocol version');\n  }\n\n  this.protocolVersion = options.protocolVersion;\n  this._isServer = false;\n  this.url = address;\n\n  const serverUrl = url.parse(address);\n  const isUnixSocket = serverUrl.protocol === 'ws+unix:';\n\n  if (!serverUrl.host && (!isUnixSocket || !serverUrl.path)) {\n    throw new Error('invalid url');\n  }\n\n  const isSecure = serverUrl.protocol === 'wss:' || serverUrl.protocol === 'https:';\n  const key = crypto.randomBytes(16).toString('base64');\n  const httpObj = isSecure ? https : http;\n\n  //\n  // Prepare extensions.\n  //\n  const extensionsOffer = {};\n  var perMessageDeflate;\n\n  if (options.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      options.perMessageDeflate !== true ? options.perMessageDeflate : {},\n      false\n    );\n    extensionsOffer[PerMessageDeflate.extensionName] = perMessageDeflate.offer();\n  }\n\n  const requestOptions = {\n    port: serverUrl.port || (isSecure ? 443 : 80),\n    host: serverUrl.hostname,\n    path: '/',\n    headers: {\n      'Sec-WebSocket-Version': options.protocolVersion,\n      'Sec-WebSocket-Key': key,\n      'Connection': 'Upgrade',\n      'Upgrade': 'websocket'\n    }\n  };\n\n  if (options.headers) Object.assign(requestOptions.headers, options.headers);\n  if (Object.keys(extensionsOffer).length) {\n    requestOptions.headers['Sec-WebSocket-Extensions'] = Extensions.format(extensionsOffer);\n  }\n  if (options.protocol) {\n    requestOptions.headers['Sec-WebSocket-Protocol'] = options.protocol;\n  }\n  if (options.origin) {\n    if (options.protocolVersion < 13) {\n      requestOptions.headers['Sec-WebSocket-Origin'] = options.origin;\n    } else {\n      requestOptions.headers.Origin = options.origin;\n    }\n  }\n  if (options.host) requestOptions.headers.Host = options.host;\n  if (serverUrl.auth) requestOptions.auth = serverUrl.auth;\n\n  if (options.localAddress) requestOptions.localAddress = options.localAddress;\n  if (options.family) requestOptions.family = options.family;\n\n  if (isUnixSocket) {\n    const parts = serverUrl.path.split(':');\n\n    requestOptions.socketPath = parts[0];\n    requestOptions.path = parts[1];\n  } else if (serverUrl.path) {\n    //\n    // Make sure that path starts with `/`.\n    //\n    if (serverUrl.path.charAt(0) !== '/') {\n      requestOptions.path = `/${serverUrl.path}`;\n    } else {\n      requestOptions.path = serverUrl.path;\n    }\n  }\n\n  var agent = options.agent;\n\n  //\n  // A custom agent is required for these options.\n  //\n  if (\n    options.rejectUnauthorized != null ||\n    options.checkServerIdentity ||\n    options.passphrase ||\n    options.ciphers ||\n    options.cert ||\n    options.key ||\n    options.pfx ||\n    options.ca\n  ) {\n    if (options.passphrase) requestOptions.passphrase = options.passphrase;\n    if (options.ciphers) requestOptions.ciphers = options.ciphers;\n    if (options.cert) requestOptions.cert = options.cert;\n    if (options.key) requestOptions.key = options.key;\n    if (options.pfx) requestOptions.pfx = options.pfx;\n    if (options.ca) requestOptions.ca = options.ca;\n    if (options.checkServerIdentity) {\n      requestOptions.checkServerIdentity = options.checkServerIdentity;\n    }\n    if (options.rejectUnauthorized != null) {\n      requestOptions.rejectUnauthorized = options.rejectUnauthorized;\n    }\n\n    if (!agent) agent = new httpObj.Agent(requestOptions);\n  }\n\n  if (agent) requestOptions.agent = agent;\n\n  this._req = httpObj.get(requestOptions);\n\n  this._req.on('error', (error) => {\n    if (this._req.aborted) return;\n\n    this._req = null;\n    this.emit('error', error);\n    this.finalize(true);\n  });\n\n  this._req.on('response', (res) => {\n    if (!this.emit('unexpected-response', this._req, res)) {\n      this._req.abort();\n      this.emit('error', new Error(`unexpected server response (${res.statusCode})`));\n      this.finalize(true);\n    }\n  });\n\n  this._req.on('upgrade', (res, socket, head) => {\n    this._req = null;\n\n    const digest = crypto.createHash('sha1')\n      .update(key + GUID, 'binary')\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      socket.destroy();\n      this.emit('error', new Error('invalid server key'));\n      return this.finalize(true);\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    const protList = (options.protocol || '').split(/, */);\n    var protError;\n\n    if (!options.protocol && serverProt) {\n      protError = 'server sent a subprotocol even though none requested';\n    } else if (options.protocol && !serverProt) {\n      protError = 'server sent no subprotocol even though requested';\n    } else if (serverProt && protList.indexOf(serverProt) === -1) {\n      protError = 'server responded with an invalid protocol';\n    }\n\n    if (protError) {\n      socket.destroy();\n      this.emit('error', new Error(protError));\n      return this.finalize(true);\n    }\n\n    if (serverProt) this.protocol = serverProt;\n\n    const serverExtensions = Extensions.parse(res.headers['sec-websocket-extensions']);\n\n    if (perMessageDeflate && serverExtensions[PerMessageDeflate.extensionName]) {\n      try {\n        perMessageDeflate.accept(serverExtensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        socket.destroy();\n        this.emit('error', new Error('invalid extension parameter'));\n        return this.finalize(true);\n      }\n\n      this.extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n    }\n\n    this.setSocket(socket, head);\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("module.exports = require(\"events\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJldmVudHNcIj9jNjhmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV2ZW50c1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImV2ZW50c1wiXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_http__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_http___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_http__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_url__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_url___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_url__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__keymap_js__ = __webpack_require__(15);\n// The unix command finally worked!!!\n// The following command needs to be run before running this script.\n/** $ xinput list |   grep -Po 'id=\\K\\d+(?=.*slave\\s*keyboard)' |   xargs -P0 -n1 xinput test | tee /dev/tty | nc -l 3333 -k\n */\n\n\n\nconst localIP = __webpack_require__(18).address();\nconsole.log(`point any browser on the same local network to ${localIP}:8080`);\n\n/**************************** WEBSOCKET SERVER ******************************/\nconst WebSocketServer = __webpack_require__(21).Server;\nconst wss = new WebSocketServer({ port: 5000 });\nwss.on('connection', ws => {\n  const location = __WEBPACK_IMPORTED_MODULE_1_url___default.a.parse(ws.upgradeReq.url, true);\n  console.log('connected to web socket, location', location);\n\n  ws.send('hey client');\n\n  ws.on('message', message => {\n    console.log(`received: ${message}`);\n  });\n\n  ws.on('close', () => {\n    console.log('closing connection');\n  });\n});\n/*__________________________________________________________________________*/\n\n/** keymapping stuff below */\n\n\n\nconst net = __webpack_require__(30);\n\n// TCP socket listening to netcat on local port 3333\nconst client = new net.Socket();\nclient.connect(3333, '127.0.0.1', () => {\n  console.log('connected to tcp socket');\n});\n\nclient.on('data', data => {\n  const num = parseInt(data.toString().match(/\\d+/)[0]);\n\n  console.log(__WEBPACK_IMPORTED_MODULE_2__keymap_js__[\"a\" /* default */].get(num));\n  console.log('data', data.toString());\n  if (data.toString().includes('press')) {\n    wss.clients.forEach(client => {\n      client.send(__WEBPACK_IMPORTED_MODULE_2__keymap_js__[\"a\" /* default */].get(num));\n    });\n  }\n});\n\nclient.on('close', () => {\n  console.log('closed');\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc2VydmVyL2luZGV4LmpzPzA4NjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHVuaXggY29tbWFuZCBmaW5hbGx5IHdvcmtlZCEhIVxuLy8gVGhlIGZvbGxvd2luZyBjb21tYW5kIG5lZWRzIHRvIGJlIHJ1biBiZWZvcmUgcnVubmluZyB0aGlzIHNjcmlwdC5cbi8qKiAkIHhpbnB1dCBsaXN0IHwgICBncmVwIC1QbyAnaWQ9XFxLXFxkKyg/PS4qc2xhdmVcXHMqa2V5Ym9hcmQpJyB8ICAgeGFyZ3MgLVAwIC1uMSB4aW5wdXQgdGVzdCB8IHRlZSAvZGV2L3R0eSB8IG5jIC1sIDMzMzMgLWtcbiAqL1xuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5cbmNvbnN0IGxvY2FsSVAgPSByZXF1aXJlKCdpcCcpLmFkZHJlc3MoKTtcbiAgY29uc29sZS5sb2coYHBvaW50IGFueSBicm93c2VyIG9uIHRoZSBzYW1lIGxvY2FsIG5ldHdvcmsgdG8gJHtsb2NhbElQfTo4MDgwYCk7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqIFdFQlNPQ0tFVCBTRVJWRVIgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuY29uc3QgV2ViU29ja2V0U2VydmVyID0gcmVxdWlyZSgnd3MnKS5TZXJ2ZXI7XG5jb25zdCB3c3MgPSBuZXcgV2ViU29ja2V0U2VydmVyKHsgcG9ydDogNTAwMCB9KTtcbndzcy5vbignY29ubmVjdGlvbicsICh3cykgPT4ge1xuICBjb25zdCBsb2NhdGlvbiA9IHVybC5wYXJzZSh3cy51cGdyYWRlUmVxLnVybCwgdHJ1ZSk7XG4gIGNvbnNvbGUubG9nKCdjb25uZWN0ZWQgdG8gd2ViIHNvY2tldCwgbG9jYXRpb24nLCBsb2NhdGlvbik7XG5cbiAgd3Muc2VuZCgnaGV5IGNsaWVudCcpO1xuXG4gIHdzLm9uKCdtZXNzYWdlJywgKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgcmVjZWl2ZWQ6ICR7bWVzc2FnZX1gKTtcbiAgfSk7XG5cbiAgd3Mub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdjbG9zaW5nIGNvbm5lY3Rpb24nKTtcbiAgfSk7XG59KTtcbi8qX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18qL1xuXG4vKioga2V5bWFwcGluZyBzdHVmZiBiZWxvdyAqL1xuXG5pbXBvcnQga2V5bWFwIGZyb20gJy4va2V5bWFwLmpzJztcblxuY29uc3QgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG5cbi8vIFRDUCBzb2NrZXQgbGlzdGVuaW5nIHRvIG5ldGNhdCBvbiBsb2NhbCBwb3J0IDMzMzNcbmNvbnN0IGNsaWVudCA9IG5ldyBuZXQuU29ja2V0KCk7XG5jbGllbnQuY29ubmVjdCgzMzMzLCAnMTI3LjAuMC4xJywgKCkgPT4ge1xuICBjb25zb2xlLmxvZygnY29ubmVjdGVkIHRvIHRjcCBzb2NrZXQnKTtcbn0pO1xuXG5jbGllbnQub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICBjb25zdCBudW0gPSBwYXJzZUludChkYXRhLnRvU3RyaW5nKCkubWF0Y2goL1xcZCsvKVswXSk7XG5cbiAgY29uc29sZS5sb2coa2V5bWFwLmdldChudW0pKVxuICBjb25zb2xlLmxvZygnZGF0YScsIGRhdGEudG9TdHJpbmcoKSk7XG4gIGlmIChkYXRhLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ3ByZXNzJykpIHtcbiAgICB3c3MuY2xpZW50cy5mb3JFYWNoKChjbGllbnQpID0+IHtcbiAgICAgIGNsaWVudC5zZW5kKGtleW1hcC5nZXQobnVtKSk7XG4gICAgfSlcbiAgfVxufSlcblxuY2xpZW50Lm9uKCdjbG9zZScsICgpID0+IHtcbiAgY29uc29sZS5sb2coJ2Nsb3NlZCcpO1xufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNlcnZlci9pbmRleC5qcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/**\n * Mapping of numerical key codes to their ascii representations.\n * Most likely only valid for my specific OS/version of ubuntu and my keyboard.\n */\n\nconst keymap = new Map([[9, 'ESC'], [67, \"F1\"], [68, \"F2\"], [69, \"F3\"], [70, \"F4\"], [71, \"F5\"], [72, \"F6\"], [73, \"F7\"], [74, \"F8\"], [75, \"F9\"], [76, \"F10\"], [95, \"F11\"], [96, \"F12\"], [118, \"INSERT\"], [107, \"PRINTSCREEN\"], [127, \"PAUSEBREAK\"], [49, \"`\"], [10, \"1\"], [11, \"2\"], [12, \"3\"], [13, \"4\"], [14, \"5\"], [15, \"6\"], [16, \"7\"], [17, \"8\"], [18, \"9\"], [19, \"0\"], [20, \"-\"], [21, \"=\"], [22, \"⌫\"], [23, \"TAB\"], [24, \"q\"], [25, \"w\"], [26, \"e\"], [27, \"r\"], [28, \"t\"], [29, \"y\"], [30, \"u\"], [31, \"i\"], [32, \"o\"], [33, \"p\"], [34, \"[\"], [35, \"]\"], [51, \"\\\\\"], [66, \"⇪\"], [38, \"a\"], [39, \"s\"], [40, \"d\"], [41, \"f\"], [42, \"g\"], [43, \"h\"], [44, \"j\"], [45, \"k\"], [46, \"l\"], [47, \";\"], [48, \"'\"], [36, \"↵\"], [50, \"⇧\"], [52, \"z\"], [53, \"x\"], [54, \"c\"], [55, \"v\"], [56, \"b\"], [57, \"n\"], [58, \"m\"], [59, \",\"], [60, \".\"], [61, \"/\"], [62, \"⇧\"], [37, \"^\"], [133, \"⌘\"], [64, \"⌥\"], [65, \"&nbsp;\"], [108, \"⌥\"], [105, \"^\"], [113, \"◀\"], [114, \"▶\"], [111, \"▲ \"], [116, \"▼\"], [119, \"⌦\"], [110, \"⇤\"], [115, \"⇥\"], [112, \"↥\"], [117, \"↧\"], [77, \"①\"], [106, \"/\"], [63, \"*\"], [82, \"-\"], [79, \"7\"], [80, \"8\"], [81, \"9\"], [83, \"4\"], [84, \"5\"], [85, \"6\"], [86, \"+\"], [87, \"1\"], [88, \"2\"], [89, \"3\"], [90, \"0\"], [91, \".\"], [104, \"↵\"]]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = keymap;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc2VydmVyL2tleW1hcC5qcz80NWQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFwcGluZyBvZiBudW1lcmljYWwga2V5IGNvZGVzIHRvIHRoZWlyIGFzY2lpIHJlcHJlc2VudGF0aW9ucy5cbiAqIE1vc3QgbGlrZWx5IG9ubHkgdmFsaWQgZm9yIG15IHNwZWNpZmljIE9TL3ZlcnNpb24gb2YgdWJ1bnR1IGFuZCBteSBrZXlib2FyZC5cbiAqL1xuXG5jb25zdCBrZXltYXAgPSBuZXcgTWFwKFtcbiAgWzksICdFU0MnXSxcbiAgWzY3LCBcIkYxXCJdLFxuICBbNjgsIFwiRjJcIl0sXG4gIFs2OSwgXCJGM1wiXSxcbiAgWzcwLCBcIkY0XCJdLFxuICBbNzEsIFwiRjVcIl0sXG4gIFs3MiwgXCJGNlwiXSxcbiAgWzczLCBcIkY3XCJdLFxuICBbNzQsIFwiRjhcIl0sXG4gIFs3NSwgXCJGOVwiXSxcbiAgWzc2LCBcIkYxMFwiXSxcbiAgWzk1LCBcIkYxMVwiXSxcbiAgWzk2LCBcIkYxMlwiXSxcbiAgWzExOCwgXCJJTlNFUlRcIl0sXG4gIFsxMDcsIFwiUFJJTlRTQ1JFRU5cIl0sXG4gIFsxMjcsIFwiUEFVU0VCUkVBS1wiXSxcbiAgWzQ5LCBcImBcIl0sXG4gIFsxMCwgXCIxXCJdLFxuICBbMTEsIFwiMlwiXSxcbiAgWzEyLCBcIjNcIl0sXG4gIFsxMywgXCI0XCJdLFxuICBbMTQsIFwiNVwiXSxcbiAgWzE1LCBcIjZcIl0sXG4gIFsxNiwgXCI3XCJdLFxuICBbMTcsIFwiOFwiXSxcbiAgWzE4LCBcIjlcIl0sXG4gIFsxOSwgXCIwXCJdLFxuICBbMjAsIFwiLVwiXSxcbiAgWzIxLCBcIj1cIl0sXG4gIFsyMiwgXCLijKtcIl0sXG4gIFsyMywgXCJUQUJcIl0sXG4gIFsyNCwgXCJxXCJdLFxuICBbMjUsIFwid1wiXSxcbiAgWzI2LCBcImVcIl0sXG4gIFsyNywgXCJyXCJdLFxuICBbMjgsIFwidFwiXSxcbiAgWzI5LCBcInlcIl0sXG4gIFszMCwgXCJ1XCJdLFxuICBbMzEsIFwiaVwiXSxcbiAgWzMyLCBcIm9cIl0sXG4gIFszMywgXCJwXCJdLFxuICBbMzQsIFwiW1wiXSxcbiAgWzM1LCBcIl1cIl0sXG4gIFs1MSwgXCJcXFxcXCJdLFxuICBbNjYsIFwi4oeqXCJdLFxuICBbMzgsIFwiYVwiXSxcbiAgWzM5LCBcInNcIl0sXG4gIFs0MCwgXCJkXCJdLFxuICBbNDEsIFwiZlwiXSxcbiAgWzQyLCBcImdcIl0sXG4gIFs0MywgXCJoXCJdLFxuICBbNDQsIFwialwiXSxcbiAgWzQ1LCBcImtcIl0sXG4gIFs0NiwgXCJsXCJdLFxuICBbNDcsIFwiO1wiXSxcbiAgWzQ4LCBcIidcIl0sXG4gIFszNiwgXCLihrVcIl0sXG4gIFs1MCwgXCLih6dcIl0sXG4gIFs1MiwgXCJ6XCJdLFxuICBbNTMsIFwieFwiXSxcbiAgWzU0LCBcImNcIl0sXG4gIFs1NSwgXCJ2XCJdLFxuICBbNTYsIFwiYlwiXSxcbiAgWzU3LCBcIm5cIl0sXG4gIFs1OCwgXCJtXCJdLFxuICBbNTksIFwiLFwiXSxcbiAgWzYwLCBcIi5cIl0sXG4gIFs2MSwgXCIvXCJdLFxuICBbNjIsIFwi4oenXCJdLFxuICBbMzcsIFwiXlwiXSxcbiAgWzEzMywgXCLijJhcIl0sXG4gIFs2NCwgXCLijKVcIl0sXG4gIFs2NSwgXCImbmJzcDtcIl0sXG4gIFsxMDgsIFwi4oylXCJdLFxuICBbMTA1LCBcIl5cIl0sXG4gIFsxMTMsIFwi4peAXCJdLFxuICBbMTE0LCBcIuKWtlwiXSxcbiAgWzExMSwgXCLilrIgXCJdLFxuICBbMTE2LCBcIuKWvFwiXSxcbiAgWzExOSwgXCLijKZcIl0sXG4gIFsxMTAsIFwi4oekXCJdLFxuICBbMTE1LCBcIuKHpVwiXSxcbiAgWzExMiwgXCLihqVcIl0sXG4gIFsxMTcsIFwi4oanXCJdLFxuICBbNzcsIFwi4pGgXCJdLFxuICBbMTA2LCBcIi9cIl0sXG4gIFs2MywgXCIqXCJdLFxuICBbODIsIFwiLVwiXSxcbiAgWzc5LCBcIjdcIl0sXG4gIFs4MCwgXCI4XCJdLFxuICBbODEsIFwiOVwiXSxcbiAgWzgzLCBcIjRcIl0sXG4gIFs4NCwgXCI1XCJdLFxuICBbODUsIFwiNlwiXSxcbiAgWzg2LCBcIitcIl0sXG4gIFs4NywgXCIxXCJdLFxuICBbODgsIFwiMlwiXSxcbiAgWzg5LCBcIjNcIl0sXG4gIFs5MCwgXCIwXCJdLFxuICBbOTEsIFwiLlwiXSxcbiAgWzEwNCwgXCLihrVcIl0sXG5dKTtcblxuZXhwb3J0IGRlZmF1bHQga2V5bWFwO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNlcnZlci9rZXltYXAuanMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBO0FBQ0E7QUF1R0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * bufferutil: WebSocket buffer utils\n * Copyright(c) 2015 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\n/**\n * Merges an array of buffers into a target buffer.\n *\n * @param {Buffer} target The target buffer\n * @param {Buffer[]} buffers The array of buffers to merge\n * @public\n */\nconst merge = (target, buffers) => {\n  var offset = 0;\n  for (var i = 0; i < buffers.length; i++) {\n    const buf = buffers[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n};\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nconst mask = (source, mask, output, offset, length) => {\n  for (var i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n};\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nconst unmask = (buffer, mask) => {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n  for (var i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n};\n\nmodule.exports = { merge, mask, unmask };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2J1ZmZlcnV0aWwvZmFsbGJhY2suanM/MDI1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGJ1ZmZlcnV0aWw6IFdlYlNvY2tldCBidWZmZXIgdXRpbHNcbiAqIENvcHlyaWdodChjKSAyMDE1IEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1lcmdlcyBhbiBhcnJheSBvZiBidWZmZXJzIGludG8gYSB0YXJnZXQgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSB0YXJnZXQgVGhlIHRhcmdldCBidWZmZXJcbiAqIEBwYXJhbSB7QnVmZmVyW119IGJ1ZmZlcnMgVGhlIGFycmF5IG9mIGJ1ZmZlcnMgdG8gbWVyZ2VcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgbWVyZ2UgPSAodGFyZ2V0LCBidWZmZXJzKSA9PiB7XG4gIHZhciBvZmZzZXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBidWYgPSBidWZmZXJzW2ldO1xuICAgIGJ1Zi5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcbiAgfVxufTtcblxuLyoqXG4gKiBNYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc291cmNlIFRoZSBidWZmZXIgdG8gbWFza1xuICogQHBhcmFtIHtCdWZmZXJ9IG1hc2sgVGhlIG1hc2sgdG8gdXNlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gb3V0cHV0IFRoZSBidWZmZXIgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IGF0IHdoaWNoIHRvIHN0YXJ0IHdyaXRpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggVGhlIG51bWJlciBvZiBieXRlcyB0byBtYXNrLlxuICogQHB1YmxpY1xuICovXG5jb25zdCBtYXNrID0gKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkgPT4ge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0W29mZnNldCArIGldID0gc291cmNlW2ldIF4gbWFza1tpICYgM107XG4gIH1cbn07XG5cbi8qKlxuICogVW5tYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gdW5tYXNrXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgdW5tYXNrID0gKGJ1ZmZlciwgbWFzaykgPT4ge1xuICAvLyBSZXF1aXJlZCB1bnRpbCBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzkwMDYgaXMgcmVzb2x2ZWQuXG4gIGNvbnN0IGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBidWZmZXJbaV0gXj0gbWFza1tpICYgM107XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyBtZXJnZSwgbWFzaywgdW5tYXNrIH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYnVmZmVydXRpbC9mYWxsYmFjay5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\ntry {\n  module.exports = __webpack_require__(5)('bufferutil');\n} catch (e) {\n  module.exports = __webpack_require__(16);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2J1ZmZlcnV0aWwvaW5kZXguanM/MmZjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnYmluZGluZ3MnKSgnYnVmZmVydXRpbCcpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFsbGJhY2snKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9idWZmZXJ1dGlsL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar ip = exports;\nvar Buffer = __webpack_require__(27).Buffer;\nvar os = __webpack_require__(31);\n\nip.toBuffer = function(ip, buff, offset) {\n  offset = ~~offset;\n\n  var result;\n\n  if (this.isV4Format(ip)) {\n    result = buff || new Buffer(offset + 4);\n    ip.split(/\\./g).map(function(byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (this.isV6Format(ip)) {\n    var sections = ip.split(':', 8);\n\n    var i;\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = this.isV4Format(sections[i]);\n      var v4Buffer;\n\n      if (isv4) {\n        v4Buffer = this.toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      var argv = [ i, 1 ];\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n      sections.splice.apply(sections, argv);\n    }\n\n    result = buff || new Buffer(offset + 16);\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = (word >> 8) & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip);\n  }\n\n  return result;\n};\n\nip.toString = function(buff, offset, length) {\n  offset = ~~offset;\n  length = length || (buff.length - offset);\n\n  var result = [];\n  if (length === 4) {\n    // IPv4\n    for (var i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n    result = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (var i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16));\n    }\n    result = result.join(':');\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    result = result.replace(/:{3,4}/, '::');\n  }\n\n  return result;\n};\n\nvar ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nvar ipv6Regex =\n    /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\n\nip.isV4Format = function(ip) {\n  return ipv4Regex.test(ip);\n};\n\nip.isV6Format = function(ip) {\n  return ipv6Regex.test(ip);\n};\nfunction _normalizeFamily(family) {\n  return family ? family.toLowerCase() : 'ipv4';\n}\n\nip.fromPrefixLen = function(prefixlen, family) {\n  if (prefixlen > 32) {\n    family = 'ipv6';\n  } else {\n    family = _normalizeFamily(family);\n  }\n\n  var len = 4;\n  if (family === 'ipv6') {\n    len = 16;\n  }\n  var buff = new Buffer(len);\n\n  for (var i = 0, n = buff.length; i < n; ++i) {\n    var bits = 8;\n    if (prefixlen < 8) {\n      bits = prefixlen;\n    }\n    prefixlen -= bits;\n\n    buff[i] = ~(0xff >> bits) & 0xff;\n  }\n\n  return ip.toString(buff);\n};\n\nip.mask = function(addr, mask) {\n  addr = ip.toBuffer(addr);\n  mask = ip.toBuffer(mask);\n\n  var result = new Buffer(Math.max(addr.length, mask.length));\n\n  var i = 0;\n  // Same protocol - do bitwise and\n  if (addr.length === mask.length) {\n    for (i = 0; i < addr.length; i++) {\n      result[i] = addr[i] & mask[i];\n    }\n  } else if (mask.length === 4) {\n    // IPv6 address and IPv4 mask\n    // (Mask low bits)\n    for (i = 0; i < mask.length; i++) {\n      result[i] = addr[addr.length - 4  + i] & mask[i];\n    }\n  } else {\n    // IPv6 mask and IPv4 addr\n    for (var i = 0; i < result.length - 6; i++) {\n      result[i] = 0;\n    }\n\n    // ::ffff:ipv4\n    result[10] = 0xff;\n    result[11] = 0xff;\n    for (i = 0; i < addr.length; i++) {\n      result[i + 12] = addr[i] & mask[i + 12];\n    }\n    i = i + 12;\n  }\n  for (; i < result.length; i++)\n    result[i] = 0;\n\n  return ip.toString(result);\n};\n\nip.cidr = function(cidrString) {\n  var cidrParts = cidrString.split('/');\n\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2)\n    throw new Error('invalid CIDR subnet: ' + addr);\n\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n\n  return ip.mask(addr, mask);\n};\n\nip.subnet = function(addr, mask) {\n  var networkAddress = ip.toLong(ip.mask(addr, mask));\n\n  // Calculate the mask's length.\n  var maskBuffer = ip.toBuffer(mask);\n  var maskLength = 0;\n\n  for (var i = 0; i < maskBuffer.length; i++) {\n    if (maskBuffer[i] === 0xff) {\n      maskLength += 8;\n    } else {\n      var octet = maskBuffer[i] & 0xff;\n      while (octet) {\n        octet = (octet << 1) & 0xff;\n        maskLength++;\n      }\n    }\n  }\n\n  var numberOfAddresses = Math.pow(2, 32 - maskLength);\n\n  return {\n    networkAddress: ip.fromLong(networkAddress),\n    firstAddress: numberOfAddresses <= 2 ?\n                    ip.fromLong(networkAddress) :\n                    ip.fromLong(networkAddress + 1),\n    lastAddress: numberOfAddresses <= 2 ?\n                    ip.fromLong(networkAddress + numberOfAddresses - 1) :\n                    ip.fromLong(networkAddress + numberOfAddresses - 2),\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\n    subnetMask: mask,\n    subnetMaskLength: maskLength,\n    numHosts: numberOfAddresses <= 2 ?\n                numberOfAddresses : numberOfAddresses - 2,\n    length: numberOfAddresses,\n    contains: function(other) {\n      return networkAddress === ip.toLong(ip.mask(other, mask));\n    }\n  };\n};\n\nip.cidrSubnet = function(cidrString) {\n  var cidrParts = cidrString.split('/');\n\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2)\n    throw new Error('invalid CIDR subnet: ' + addr);\n\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n\n  return ip.subnet(addr, mask);\n};\n\nip.not = function(addr) {\n  var buff = ip.toBuffer(addr);\n  for (var i = 0; i < buff.length; i++) {\n    buff[i] = 0xff ^ buff[i];\n  }\n  return ip.toString(buff);\n};\n\nip.or = function(a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // same protocol\n  if (a.length === b.length) {\n    for (var i = 0; i < a.length; ++i) {\n      a[i] |= b[i];\n    }\n    return ip.toString(a);\n\n  // mixed protocols\n  } else {\n    var buff = a;\n    var other = b;\n    if (b.length > a.length) {\n      buff = b;\n      other = a;\n    }\n\n    var offset = buff.length - other.length;\n    for (var i = offset; i < buff.length; ++i) {\n      buff[i] |= other[i - offset];\n    }\n\n    return ip.toString(buff);\n  }\n};\n\nip.isEqual = function(a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // Same protocol\n  if (a.length === b.length) {\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  // Swap\n  if (b.length === 4) {\n    var t = b;\n    b = a;\n    a = t;\n  }\n\n  // a - IPv4, b - IPv6\n  for (var i = 0; i < 10; i++) {\n    if (b[i] !== 0) return false;\n  }\n\n  var word = b.readUInt16BE(10);\n  if (word !== 0 && word !== 0xffff) return false;\n\n  for (var i = 0; i < 4; i++) {\n    if (a[i] !== b[i + 12]) return false;\n  }\n\n  return true;\n};\n\nip.isPrivate = function(addr) {\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\n      .test(addr) ||\n    /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||\n    /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\n      .test(addr) ||\n    /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||\n    /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||\n    /^f[cd][0-9a-f]{2}:/i.test(addr) ||\n    /^fe80:/i.test(addr) ||\n    /^::1$/.test(addr) ||\n    /^::$/.test(addr);\n};\n\nip.isPublic = function(addr) {\n  return !ip.isPrivate(addr);\n};\n\nip.isLoopback = function(addr) {\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/\n      .test(addr) ||\n    /^fe80::1$/.test(addr) ||\n    /^::1$/.test(addr) ||\n    /^::$/.test(addr);\n};\n\nip.loopback = function(family) {\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  if (family !== 'ipv4' && family !== 'ipv6') {\n    throw new Error('family must be ipv4 or ipv6');\n  }\n\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\n};\n\n//\n// ### function address (name, family)\n// #### @name {string|'public'|'private'} **Optional** Name or security\n//      of the network interface.\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\n//      to ipv4).\n//\n// Returns the address for the network interface on the current system with\n// the specified `name`:\n//   * String: First `family` address of the interface.\n//             If not found see `undefined`.\n//   * 'public': the first public ip address of family.\n//   * 'private': the first private ip address of family.\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\n//\nip.address = function(name, family) {\n  var interfaces = os.networkInterfaces();\n  var all;\n\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  //\n  // If a specific network interface has been named,\n  // return the address.\n  //\n  if (name && name !== 'private' && name !== 'public') {\n    var res = interfaces[name].filter(function(details) {\n      var itemFamily = details.family.toLowerCase();\n      return itemFamily === family;\n    });\n    if (res.length === 0)\n      return undefined;\n    return res[0].address;\n  }\n\n  var all = Object.keys(interfaces).map(function (nic) {\n    //\n    // Note: name will only be `public` or `private`\n    // when this is called.\n    //\n    var addresses = interfaces[nic].filter(function (details) {\n      details.family = details.family.toLowerCase();\n      if (details.family !== family || ip.isLoopback(details.address)) {\n        return false;\n      } else if (!name) {\n        return true;\n      }\n\n      return name === 'public' ? ip.isPrivate(details.address) :\n          ip.isPublic(details.address);\n    });\n\n    return addresses.length ? addresses[0].address : undefined;\n  }).filter(Boolean);\n\n  return !all.length ? ip.loopback(family) : all[0];\n};\n\nip.toLong = function(ip) {\n  var ipl = 0;\n  ip.split('.').forEach(function(octet) {\n    ipl <<= 8;\n    ipl += parseInt(octet);\n  });\n  return(ipl >>> 0);\n};\n\nip.fromLong = function(ipl) {\n  return ((ipl >>> 24) + '.' +\n      (ipl >> 16 & 255) + '.' +\n      (ipl >> 8 & 255) + '.' +\n      (ipl & 255) );\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * UTF-8 validate: UTF-8 validation for WebSockets.\n * Copyright(c) 2015 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nconst isValidUTF8 = (buf) => {\n  if (!Buffer.isBuffer(buf)) {\n    throw new TypeError('First argument needs to be a buffer');\n  }\n\n  var len = buf.length;\n  var i = 0;\n\n  while (i < len) {\n    if (buf[i] < 0x80) {  // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {  // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0  // overlong\n      ) {\n        return false;\n      } else {\n        i += 2;\n      }\n    } else if ((buf[i] & 0xf0) === 0xe0) {  // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 ||  // overlong\n        buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0     // surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      } else {\n        i += 3;\n      }\n    } else if ((buf[i] & 0xf8) === 0xf0) {  // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 ||  // overlong\n        buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4  // > U+10FFFF\n      ) {\n        return false;\n      } else {\n        i += 4;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = isValidUTF8;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3V0Zi04LXZhbGlkYXRlL2ZhbGxiYWNrLmpzPzc1NTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBVVEYtOCB2YWxpZGF0ZTogVVRGLTggdmFsaWRhdGlvbiBmb3IgV2ViU29ja2V0cy5cbiAqIENvcHlyaWdodChjKSAyMDE1IEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIGJ1ZmZlciBjb250YWlucyBvbmx5IGNvcnJlY3QgVVRGLTguXG4gKiBQb3J0ZWQgZnJvbSBodHRwczovL3d3dy5jbC5jYW0uYWMudWsvJTdFbWdrMjUvdWNzL3V0ZjhfY2hlY2suYyBieVxuICogTWFya3VzIEt1aG4uXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZiBUaGUgYnVmZmVyIHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYGJ1ZmAgY29udGFpbnMgb25seSBjb3JyZWN0IFVURi04LCBlbHNlIGBmYWxzZWBcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgaXNWYWxpZFVURjggPSAoYnVmKSA9PiB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBuZWVkcyB0byBiZSBhIGJ1ZmZlcicpO1xuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG4gIHZhciBpID0gMDtcblxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIGlmIChidWZbaV0gPCAweDgwKSB7ICAvLyAweHh4eHh4eFxuICAgICAgaSsrO1xuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZTApID09PSAweGMwKSB7ICAvLyAxMTB4eHh4eCAxMHh4eHh4eFxuICAgICAgaWYgKFxuICAgICAgICBpICsgMSA9PT0gbGVuIHx8XG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSAmIDB4ZmUpID09PSAweGMwICAvLyBvdmVybG9uZ1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgKz0gMjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKChidWZbaV0gJiAweGYwKSA9PT0gMHhlMCkgeyAgLy8gMTExMHh4eHggMTB4eHh4eHggMTB4eHh4eHhcbiAgICAgIGlmIChcbiAgICAgICAgaSArIDIgPj0gbGVuIHx8XG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpICsgMl0gJiAweGMwKSAhPT0gMHg4MCB8fFxuICAgICAgICBidWZbaV0gPT09IDB4ZTAgJiYgKGJ1ZltpICsgMV0gJiAweGUwKSA9PT0gMHg4MCB8fCAgLy8gb3ZlcmxvbmdcbiAgICAgICAgYnVmW2ldID09PSAweGVkICYmIChidWZbaSArIDFdICYgMHhlMCkgPT09IDB4YTAgICAgIC8vIHN1cnJvZ2F0ZSAoVStEODAwIC0gVStERkZGKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgKz0gMztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKChidWZbaV0gJiAweGY4KSA9PT0gMHhmMCkgeyAgLy8gMTExMTB4eHggMTB4eHh4eHggMTB4eHh4eHggMTB4eHh4eHhcbiAgICAgIGlmIChcbiAgICAgICAgaSArIDMgPj0gbGVuIHx8XG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpICsgMl0gJiAweGMwKSAhPT0gMHg4MCB8fFxuICAgICAgICAoYnVmW2kgKyAzXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIGJ1ZltpXSA9PT0gMHhmMCAmJiAoYnVmW2kgKyAxXSAmIDB4ZjApID09PSAweDgwIHx8ICAvLyBvdmVybG9uZ1xuICAgICAgICBidWZbaV0gPT09IDB4ZjQgJiYgYnVmW2kgKyAxXSA+IDB4OGYgfHwgYnVmW2ldID4gMHhmNCAgLy8gPiBVKzEwRkZGRlxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1ZhbGlkVVRGODtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi91dGYtOC12YWxpZGF0ZS9mYWxsYmFjay5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\ntry {\n  module.exports = __webpack_require__(5)('validation');\n} catch (e) {\n  module.exports = __webpack_require__(19);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3V0Zi04LXZhbGlkYXRlL2luZGV4LmpzP2E4OGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG50cnkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2JpbmRpbmdzJykoJ3ZhbGlkYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhbGxiYWNrJyk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdXRmLTgtdmFsaWRhdGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\nconst WebSocket = __webpack_require__(12);\n\nWebSocket.Server = __webpack_require__(26);\nWebSocket.Receiver = __webpack_require__(10);\nWebSocket.Sender = __webpack_require__(11);\n\nmodule.exports = WebSocket;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dzL2luZGV4LmpzPzFlODEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnRcbiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBXZWJTb2NrZXQgPSByZXF1aXJlKCcuL2xpYi9XZWJTb2NrZXQnKTtcblxuV2ViU29ja2V0LlNlcnZlciA9IHJlcXVpcmUoJy4vbGliL1dlYlNvY2tldFNlcnZlcicpO1xuV2ViU29ja2V0LlJlY2VpdmVyID0gcmVxdWlyZSgnLi9saWIvUmVjZWl2ZXInKTtcbldlYlNvY2tldC5TZW5kZXIgPSByZXF1aXJlKCcuL2xpYi9TZW5kZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd3MvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\n/**\n * Merges an array of buffers into a target buffer.\n *\n * @param {Buffer} target The target buffer\n * @param {Buffer[]} buffers The array of buffers to merge\n * @public\n */\nconst merge = (target, buffers) => {\n  var offset = 0;\n  for (var i = 0; i < buffers.length; i++) {\n    const buf = buffers[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n};\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nconst mask = (source, mask, output, offset, length) => {\n  for (var i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n};\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nconst unmask = (buffer, mask) => {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n  for (var i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n};\n\nmodule.exports = { merge, mask, unmask };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dzL2xpYi9CdWZmZXJVdGlsLmZhbGxiYWNrLmpzPzliNTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnRcbiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1lcmdlcyBhbiBhcnJheSBvZiBidWZmZXJzIGludG8gYSB0YXJnZXQgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSB0YXJnZXQgVGhlIHRhcmdldCBidWZmZXJcbiAqIEBwYXJhbSB7QnVmZmVyW119IGJ1ZmZlcnMgVGhlIGFycmF5IG9mIGJ1ZmZlcnMgdG8gbWVyZ2VcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgbWVyZ2UgPSAodGFyZ2V0LCBidWZmZXJzKSA9PiB7XG4gIHZhciBvZmZzZXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBidWYgPSBidWZmZXJzW2ldO1xuICAgIGJ1Zi5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcbiAgfVxufTtcblxuLyoqXG4gKiBNYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc291cmNlIFRoZSBidWZmZXIgdG8gbWFza1xuICogQHBhcmFtIHtCdWZmZXJ9IG1hc2sgVGhlIG1hc2sgdG8gdXNlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gb3V0cHV0IFRoZSBidWZmZXIgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IGF0IHdoaWNoIHRvIHN0YXJ0IHdyaXRpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggVGhlIG51bWJlciBvZiBieXRlcyB0byBtYXNrLlxuICogQHB1YmxpY1xuICovXG5jb25zdCBtYXNrID0gKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkgPT4ge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0W29mZnNldCArIGldID0gc291cmNlW2ldIF4gbWFza1tpICYgM107XG4gIH1cbn07XG5cbi8qKlxuICogVW5tYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gdW5tYXNrXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgdW5tYXNrID0gKGJ1ZmZlciwgbWFzaykgPT4ge1xuICAvLyBSZXF1aXJlZCB1bnRpbCBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzkwMDYgaXMgcmVzb2x2ZWQuXG4gIGNvbnN0IGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBidWZmZXJbaV0gXj0gbWFza1tpICYgM107XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyBtZXJnZSwgbWFzaywgdW5tYXNrIH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd3MvbGliL0J1ZmZlclV0aWwuZmFsbGJhY2suanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor (type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer)} data The received data\n   * @param {Boolean} isBinary Specifies if `data` is binary\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (data, isBinary, target) {\n    super('message', target);\n\n    this.binary = isBinary; // non-standard.\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (code, reason, target) {\n    super('close', target);\n\n    this.wasClean = code === undefined || code === 1000;\n    this.reason = reason;\n    this.target = target;\n    this.type = 'close';\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (target) {\n    super('open', target);\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener (method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage (data, flags) {\n      if (flags.binary && this.binaryType === 'arraybuffer') {\n        data = new Uint8Array(data).buffer;\n      }\n      listener.call(this, new MessageEvent(data, !!flags.binary, this));\n    }\n\n    function onClose (code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError (event) {\n      event.type = 'error';\n      event.target = this;\n      listener.call(this, event);\n    }\n\n    function onOpen () {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener (method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dzL2xpYi9FdmVudFRhcmdldC5qcz85YzcwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gZXZlbnQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgRXZlbnQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGBFdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IEEgcmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgdG8gd2hpY2ggdGhlIGV2ZW50IHdhcyBkaXNwYXRjaGVkXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodHlwZSwgdGFyZ2V0KSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIG1lc3NhZ2UgZXZlbnQuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIE1lc3NhZ2VFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgTWVzc2FnZUV2ZW50YC5cbiAgICpcbiAgICogQHBhcmFtIHsoU3RyaW5nfEJ1ZmZlcnxBcnJheUJ1ZmZlcil9IGRhdGEgVGhlIHJlY2VpdmVkIGRhdGFcbiAgICogQHBhcmFtIHtCb29sZWFufSBpc0JpbmFyeSBTcGVjaWZpZXMgaWYgYGRhdGFgIGlzIGJpbmFyeVxuICAgKiBAcGFyYW0ge1dlYlNvY2tldH0gdGFyZ2V0IEEgcmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgdG8gd2hpY2ggdGhlIGV2ZW50IHdhcyBkaXNwYXRjaGVkXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZGF0YSwgaXNCaW5hcnksIHRhcmdldCkge1xuICAgIHN1cGVyKCdtZXNzYWdlJywgdGFyZ2V0KTtcblxuICAgIHRoaXMuYmluYXJ5ID0gaXNCaW5hcnk7IC8vIG5vbi1zdGFuZGFyZC5cbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICB9XG59XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgY2xvc2UgZXZlbnQuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENsb3NlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYENsb3NlRXZlbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gY29kZSBUaGUgc3RhdHVzIGNvZGUgZXhwbGFpbmluZyB3aHkgdGhlIGNvbm5lY3Rpb24gaXMgYmVpbmcgY2xvc2VkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb24gQSBodW1hbi1yZWFkYWJsZSBzdHJpbmcgZXhwbGFpbmluZyB3aHkgdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2luZ1xuICAgKiBAcGFyYW0ge1dlYlNvY2tldH0gdGFyZ2V0IEEgcmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgdG8gd2hpY2ggdGhlIGV2ZW50IHdhcyBkaXNwYXRjaGVkXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoY29kZSwgcmVhc29uLCB0YXJnZXQpIHtcbiAgICBzdXBlcignY2xvc2UnLCB0YXJnZXQpO1xuXG4gICAgdGhpcy53YXNDbGVhbiA9IGNvZGUgPT09IHVuZGVmaW5lZCB8fCBjb2RlID09PSAxMDAwO1xuICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMudHlwZSA9ICdjbG9zZSc7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBvcGVuIGV2ZW50LlxuICpcbiAqIEBleHRlbmRzIEV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBPcGVuRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYE9wZW5FdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViU29ja2V0fSB0YXJnZXQgQSByZWZlcmVuY2UgdG8gdGhlIHRhcmdldCB0byB3aGljaCB0aGUgZXZlbnQgd2FzIGRpc3BhdGNoZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yICh0YXJnZXQpIHtcbiAgICBzdXBlcignb3BlbicsIHRhcmdldCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHByb3ZpZGVzIG1ldGhvZHMgZm9yIGVtdWxhdGluZyB0aGUgYEV2ZW50VGFyZ2V0YCBpbnRlcmZhY2UuIEl0J3Mgbm90XG4gKiBtZWFudCB0byBiZSB1c2VkIGRpcmVjdGx5LlxuICpcbiAqIEBtaXhpblxuICovXG5jb25zdCBFdmVudFRhcmdldCA9IHtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZXZlbnQgdHlwZSB0byBsaXN0ZW4gZm9yXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBhZGRcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lciAobWV0aG9kLCBsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAgIGZ1bmN0aW9uIG9uTWVzc2FnZSAoZGF0YSwgZmxhZ3MpIHtcbiAgICAgIGlmIChmbGFncy5iaW5hcnkgJiYgdGhpcy5iaW5hcnlUeXBlID09PSAnYXJyYXlidWZmZXInKSB7XG4gICAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShkYXRhKS5idWZmZXI7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIG5ldyBNZXNzYWdlRXZlbnQoZGF0YSwgISFmbGFncy5iaW5hcnksIHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNsb3NlIChjb2RlLCBtZXNzYWdlKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIG5ldyBDbG9zZUV2ZW50KGNvZGUsIG1lc3NhZ2UsIHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkVycm9yIChldmVudCkge1xuICAgICAgZXZlbnQudHlwZSA9ICdlcnJvcic7XG4gICAgICBldmVudC50YXJnZXQgPSB0aGlzO1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25PcGVuICgpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgbmV3IE9wZW5FdmVudCh0aGlzKSk7XG4gICAgfVxuXG4gICAgaWYgKG1ldGhvZCA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICBvbk1lc3NhZ2UuX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICB0aGlzLm9uKG1ldGhvZCwgb25NZXNzYWdlKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2Nsb3NlJykge1xuICAgICAgb25DbG9zZS5fbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgIHRoaXMub24obWV0aG9kLCBvbkNsb3NlKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ2Vycm9yJykge1xuICAgICAgb25FcnJvci5fbGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgIHRoaXMub24obWV0aG9kLCBvbkVycm9yKTtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gJ29wZW4nKSB7XG4gICAgICBvbk9wZW4uX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICB0aGlzLm9uKG1ldGhvZCwgb25PcGVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbihtZXRob2QsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBldmVudCBsaXN0ZW5lci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGV2ZW50IHR5cGUgdG8gcmVtb3ZlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byByZW1vdmVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lciAobWV0aG9kLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzKG1ldGhvZCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdGVuZXJzW2ldLl9saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihtZXRob2QsIGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50VGFyZ2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3dzL2xpYi9FdmVudFRhcmdldC5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\nmodule.exports = () => true;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dzL2xpYi9WYWxpZGF0aW9uLmZhbGxiYWNrLmpzPzE0ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnRcbiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHRydWU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd3MvbGliL1ZhbGlkYXRpb24uZmFsbGJhY2suanNcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\ntry {\n  const isValidUTF8 = __webpack_require__(20);\n\n  module.exports = typeof isValidUTF8 === 'object'\n    ? isValidUTF8.Validation.isValidUTF8  // utf-8-validate@<3.0.0\n    : isValidUTF8;\n} catch (e) {\n  module.exports = __webpack_require__(24);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dzL2xpYi9WYWxpZGF0aW9uLmpzP2E3ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnRcbiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG50cnkge1xuICBjb25zdCBpc1ZhbGlkVVRGOCA9IHJlcXVpcmUoJ3V0Zi04LXZhbGlkYXRlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgaXNWYWxpZFVURjggPT09ICdvYmplY3QnXG4gICAgPyBpc1ZhbGlkVVRGOC5WYWxpZGF0aW9uLmlzVmFsaWRVVEY4ICAvLyB1dGYtOC12YWxpZGF0ZUA8My4wLjBcbiAgICA6IGlzVmFsaWRVVEY4O1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vVmFsaWRhdGlvbi5mYWxsYmFjaycpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3dzL2xpYi9WYWxpZGF0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n\n\nconst EventEmitter = __webpack_require__(13);\nconst crypto = __webpack_require__(1);\nconst Ultron = __webpack_require__(6);\nconst http = __webpack_require__(2);\nconst url = __webpack_require__(3);\n\nconst PerMessageDeflate = __webpack_require__(0);\nconst Extensions = __webpack_require__(9);\nconst WebSocket = __webpack_require__(12);\n\nconst GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.path Accept only connections matching this path\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {Boolean} options.clientTracking Specifies whether or not to track clients\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor (options, callback) {\n    super();\n\n    options = Object.assign({\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: true,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null\n    }, options);\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError('missing or invalid options');\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.allowHalfOpen = false;\n      this._server.listen(options.port, options.host, options.backlog, callback);\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._ultron = new Ultron(this._server);\n      this._ultron.on('listening', () => this.emit('listening'));\n      this._ultron.on('error', (err) => this.emit('error', err));\n      this._ultron.on('upgrade', (req, socket, head) => {\n        this.handleUpgrade(req, socket, head, (client) => {\n          this.emit(`connection${req.url}`, client);\n          this.emit('connection', client);\n        });\n      });\n    }\n\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n    this.path = options.path;\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close (cb) {\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._ultron.destroy();\n      this._ultron = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) return server.close(cb);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle (req) {\n    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade (req, socket, head, cb) {\n    socket.on('error', socketError);\n\n    const version = +req.headers['sec-websocket-version'];\n\n    if (\n      req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !req.headers['sec-websocket-key'] || version !== 8 && version !== 13 ||\n      !this.shouldHandle(req)\n    ) {\n      return abortConnection(socket, 400);\n    }\n\n    var protocol = (req.headers['sec-websocket-protocol'] || '').split(/, */);\n\n    //\n    // Optionally call external protocol selection handler.\n    //\n    if (this.options.handleProtocols) {\n      protocol = this.options.handleProtocols(protocol);\n      if (protocol === false) return abortConnection(socket, 401);\n    } else {\n      protocol = protocol[0];\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message) => {\n          if (!verified) return abortConnection(socket, code || 401, message);\n\n          this.completeUpgrade(protocol, version, req, socket, head, cb);\n        });\n        return;\n      } else if (!this.options.verifyClient(info)) {\n        return abortConnection(socket, 401);\n      }\n    }\n\n    this.completeUpgrade(protocol, version, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} protocol The chosen subprotocol\n   * @param {Number} version The WebSocket protocol version\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n  completeUpgrade (protocol, version, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    const key = crypto.createHash('sha1')\n      .update(req.headers['sec-websocket-key'] + GUID, 'binary')\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${key}`\n    ];\n\n    if (protocol) headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n\n    const offer = Extensions.parse(req.headers['sec-websocket-extensions']);\n    var extensions;\n\n    try {\n      extensions = acceptExtensions(this.options, offer);\n    } catch (err) {\n      return abortConnection(socket, 400);\n    }\n\n    const props = Object.keys(extensions);\n\n    if (props.length) {\n      const serverExtensions = props.reduce((obj, key) => {\n        obj[key] = [extensions[key].params];\n        return obj;\n      }, {});\n\n      headers.push(`Sec-WebSocket-Extensions: ${Extensions.format(serverExtensions)}`);\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers);\n\n    socket.write(headers.concat('', '').join('\\r\\n'));\n\n    const client = new WebSocket([req, socket, head], {\n      maxPayload: this.options.maxPayload,\n      protocolVersion: version,\n      extensions,\n      protocol\n    });\n\n    if (this.clients) {\n      this.clients.add(client);\n      client.on('close', () => this.clients.delete(client));\n    }\n\n    socket.removeListener('error', socketError);\n    cb(client);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketError () {\n  this.destroy();\n}\n\n/**\n * Accept WebSocket extensions.\n *\n * @param {Object} options The `WebSocketServer` configuration options\n * @param {Object} offer The parsed value of the `sec-websocket-extensions` header\n * @return {Object} Accepted extensions\n * @private\n */\nfunction acceptExtensions (options, offer) {\n  const pmd = options.perMessageDeflate;\n  const extensions = {};\n\n  if (pmd && offer[PerMessageDeflate.extensionName]) {\n    const perMessageDeflate = new PerMessageDeflate(\n      pmd !== true ? pmd : {},\n      true,\n      options.maxPayload\n    );\n\n    perMessageDeflate.accept(offer[PerMessageDeflate.extensionName]);\n    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n  }\n\n  return extensions;\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @private\n */\nfunction abortConnection (socket, code, message) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      'Connection: close\\r\\n' +\n      'Content-type: text/html\\r\\n' +\n      `Content-Length: ${Buffer.byteLength(message)}\\r\\n` +\n      '\\r\\n' +\n      message\n    );\n  }\n\n  socket.removeListener('error', socketError);\n  socket.destroy();\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 27 */
/***/ (function(module, exports) {

eval("module.exports = require(\"buffer\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJidWZmZXJcIj81N2Q0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImJ1ZmZlclwiXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

eval("module.exports = require(\"fs\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiPzJlMDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJmc1wiXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

eval("module.exports = require(\"https\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwc1wiPzEwZDMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJodHRwc1wiXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

eval("module.exports = require(\"net\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJuZXRcIj9lYjg1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5ldFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcIm5ldFwiXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 31 */
/***/ (function(module, exports) {

eval("module.exports = require(\"os\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJvc1wiPzQ5YmMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJvc1wiXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 32 */
/***/ (function(module, exports) {

eval("module.exports = require(\"path\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwYXRoXCI/NWIyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwicGF0aFwiXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 33 */
/***/ (function(module, exports) {

eval("module.exports = require(\"zlib\");//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ6bGliXCI/MzdiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiemxpYlwiXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(14);


/***/ })
/******/ ]);